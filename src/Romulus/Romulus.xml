<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Romulus</name>
    </assembly>
    <members>
        <member name="M:Romulus.Plugin.RomDocument.SetFilename(System.String)">
            <summary>
            Sets the value of the Filename property.
            </summary>
            <param name="path">The file path.</param>
            <remarks>This method allows derived classes to change the filename without exposing
            this functionality to plug-in or framework classes.</remarks>
        </member>
        <member name="M:Romulus.Plugin.RomDocument.IncrementVersion">
            <summary>
            Forces an increment in the Version.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.RomDocument.CommitChanges(Romulus.Nes.Rom)">
            <summary>
            Copies the specified ROM image to the root ROM image.
            </summary>
            <param name="changedRom">A ROM image that has changes.</param>
            <remarks>The version number is incremented when this method is called. The specified ROM image
            should be the same size as the root ROM image.</remarks>
        </member>
        <member name="M:Romulus.Plugin.RomDocument.BeforeCommitCHanges(Romulus.Nes.Rom)">
            <summary>
            Called before a commit occurs.
            </summary>
            <param name="changedRom">The ROM to be committed.</param>
        </member>
        <member name="M:Romulus.Plugin.RomDocument.UpdateWorkingCopy(Romulus.Nes.Rom)">
            <summary>
            Copies the root ROM image to the specified ROM image.
            </summary>
            <param name="dest">The Rom to be updated.</param>
        </member>
        <member name="P:Romulus.Plugin.RomDocument.Filename">
            <summary>
            Gets the filename, or null if this document was not loaded from disk.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.RomDocument.RootRom">
            <summary>
            Gets the root ROM.
            </summary>
            <remarks>This ROM image should never be directly modified. Changes should
            be made to a "working copy", which can be obtained by calling GetNewWorkingCopy.
            Changes can be applied to the root ROM by calling CommitChanges. Changes commited
            from other working copies can be reflected in another working copy by
            calling UpdateWorkingCopy. Only one working copy should be modified at a
            time, with changes commited before any operations are performed on another working copy.
            Otherwise, some changes may be overwritten during a commit or update.</remarks>
        </member>
        <member name="P:Romulus.Plugin.RomDocument.Version">
            <summary>
            Returns an integer that identifies how many times the ROM image
            has changed.
            </summary>
            <remarks>Lack of change in the version number indicates
            lack of change in the ROM image. It is possible, but not likely, for
            the version number to "wrap around" (with roughly four billion
            updates to the ROM image).</remarks>
        </member>
        <member name="T:Romulus.Nes.PatternLoader">
            <summary>
            Provides functions to load ROM graphic data into a System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.BytesPerPattern">
            <summary>
            Defines the number of bytes used by the data of one pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.PatternWidth">
            <summary>
            Defines the width of a single pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.PatternHeight">
            <summary>
            Defines the height of a single pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.patterns">
            <summary>Stores the actual pattern images.</summary>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="target">The bitmap to load graphics to.</param>
            <remarks>When using this overload, this object does not own the pre-existing target
            and will not dispose it.</remarks>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="widthInTiles">The number of tiles that will fit in the pattern image, horizontally.</param>
            <param name="heightInTiles">The number of tiles that will fit in the pattern image, vertically.</param>
            <remarks>Since the target bitmap is created by the PatternLoader, it will be disposed
            with the pattern loader.</remarks>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="widthInTiles">The number of tiles that will fit in the pattern image, horizontally.</param>
            <param name="heightInTiles">The number of tiles that will fit in the pattern image, vertically.</param>
            <param name="destroyPatternsOnDispose">If true, the pattern bitmap will be disposed when this
            object is disposed.</param>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.lockData">
            <summary>Stores BitmapData if the buffer is locked. Set to null if the buffer is not locked.</summary>
        </member>
        <member name="F:Romulus.Nes.PatternLoader.lockBits">
            <summary>Locked buffer data. If the buffer is not locked, the variable may be null.</summary>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.BeginWrite">
            <summary>
            Prepares the pattern table for loading tiles.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.EndWrite">
            <summary>
            Finalizes writing operations to the pattern table. This must be called after loading patterns and before the
            pattern table can be used.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.Clear">
            <summary>
            Clears pattern data from the pattern image. If the pattern table
            is not already locked, it will be locked for the duration of this
            operation.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.LoadTiles(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Loads tile data. Tiles will be arranged in a horizontal strip.</summary>
            <param name="data">ROM image.</param>
            <param name="offset">Offset of tile data.</param>
            <param name="x">The x-position to load the tiles to.</param>
            <param name="y">The y-position to load the tiles to.</param>
            <param name="tileCount">Number of tiles to load.</param>
        </member>
        <member name="M:Romulus.Nes.PatternLoader.Dispose">
            <summary>
            Releases resources used by this object.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternLoader.WriteInProgress">
            <summary>
            Returns true if this object is locked for writing.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternLoader.PatternImage">
            <summary>
            Returns an 8 bpp bitmap containing all loaded tiles.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternLoader.Palette">
            <summary>
            Gets or sets the color applied to this pattern table.
            </summary>
        </member>
        <member name="T:Romulus.Nes.SpriteTile">
            <summary>
            Defines an on-screen sprite.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SpriteTile.#ctor(System.Byte,System.Byte,System.Byte,Romulus.Nes.Blitter.FlipFlags,System.Byte)">
            <summary>
            Initializes a SpriteTile
            </summary>
            <param name="tile">Pattern index</param>
            <param name="x">Screen coordinate</param>
            <param name="y">Screen coordinate</param>
            <param name="flip">Flipping</param>
            <param name="pal">Palette index</param>
        </member>
        <member name="M:Romulus.Nes.SpriteTile.#ctor(System.Byte,System.Byte,System.Byte,Romulus.Nes.Blitter.FlipFlags)">
            <summary>
            Initializes a SpriteTile
            </summary>
            <param name="tile">Pattern index</param>
            <param name="x">Screen coordinate</param>
            <param name="y">Screen coordinate</param>
            <param name="flip">Flipping</param>
        </member>
        <member name="F:Romulus.Nes.SpriteTile.tile">
            <summary>Pattern index.</summary>
        </member>
        <member name="F:Romulus.Nes.SpriteTile.x">
            <summary>Screen coordinate.</summary>
        </member>
        <member name="F:Romulus.Nes.SpriteTile.y">
            <summary>Screen coordinate.</summary>
        </member>
        <member name="F:Romulus.Nes.SpriteTile.flip">
            <summary>Flipping.</summary>
        </member>
        <member name="F:Romulus.Nes.SpriteTile.pal">
            <summary>Palette index.</summary>
        </member>
        <member name="T:Romulus.Nes.SmallNameTable">
            <summary>
            Represents a combined nametable and attribute large enough to hold a (256, 256) background.
            </summary>
        </member>
        <member name="F:Romulus.Nes.SmallNameTable.Width">
            <summary>The size of the name table.</summary>
        </member>
        <member name="F:Romulus.Nes.SmallNameTable.Height">
            <summary>The size of the name table.</summary>
        </member>
        <member name="F:Romulus.Nes.SmallNameTable.tiles">
            <summary>Pattern index data</summary>
        </member>
        <member name="F:Romulus.Nes.SmallNameTable.palettes">
            <summary>Palette index data</summary>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.#ctor">
            <summary>
            Creates a SmallNameTable.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.SetTile(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the pattern index for one tile.
            </summary>
            <param name="x">The location of the tile to set.</param>
            <param name="y">The location of the tile to set.</param>
            <param name="value">Pattern index.</param>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.GetTile(System.Int32,System.Int32)">
            <summary>
            Gets the pattern index for one tile.
            </summary>
            <param name="x">The location of the tile to get.</param>
            <param name="y">The location of the tile to get.</param>
            <returns>The pattern index.</returns>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.SetPalette(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the palette index for one tile.
            </summary>
            <param name="x">The location of the tile to set.</param>
            <param name="y">The location of the tile to set.</param>
            <param name="value">Palette index.</param>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.GetPalette(System.Int32,System.Int32)">
            <summary>
            Gets the palette index for one tile.
            </summary>
            <param name="x">The location of the tile to get.</param>
            <param name="y">The location of the tile to get.</param>
            <returns>The palette index.</returns>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.GetBackingData">
            <summary>
            Gets references to the raw NameTable data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.Clear">
            <summary>
            Clears the name table data.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SmallNameTable.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets data for one tile.
            </summary>
            <param name="x">Tile location.</param>
            <param name="y">Tile location.</param>
            <returns>Data for the specified tile.</returns>
        </member>
        <member name="T:Romulus.Nes.SmallNameTable.NameTableData">
            <summary>
            Contains references to name table data.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SmallNameTable.NameTableData.#ctor(Romulus.Nes.SmallNameTable)">
            <summary>Initializes this structure.</summary>
            <param name="t">Name table to get data from.</param>
        </member>
        <member name="P:Romulus.Nes.SmallNameTable.NameTableData.Tiles">
            <summary>Reference to name table tile data.</summary>
        </member>
        <member name="P:Romulus.Nes.SmallNameTable.NameTableData.Palette">
            <summary>Reference to name table palette data.</summary>
        </member>
        <member name="T:Romulus.Nes.SmallExtendedNameTable`1">
            <summary>
            Represents a small name table with extra data of an arbitrary type for each individual tile.
            </summary>
            <typeparam name="T">The type of data </typeparam>
        </member>
        <member name="F:Romulus.Nes.SmallExtendedNameTable`1.extendedData">
            <summary>
            Additional data for each tile in the name table.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.#ctor">
            <summary>
            Creates an extended name table.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.GetData(System.Int32,System.Int32)">
            <summary>
            Gets the data for the specified tile.
            </summary>
            <param name="x">The location of the tile to get.</param>
            <param name="y">The location of the tile to get.</param>
            <returns>The tile data.</returns>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.SetData(System.Int32,System.Int32,`0)">
            <summary>
            Sets the data for one tile.
            </summary>
            <param name="x">The location of the tile to set.</param>
            <param name="y">The location of the tile to set.</param>
            <param name="data">Tile data.</param>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.GetBackingData">
            <summary>
            Gets the raw data for the extended name table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.Clear">
            <summary>
            Clears the name table data.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SmallExtendedNameTable`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets data for one tile.
            </summary>
            <param name="x">Tile location.</param>
            <param name="y">Tile location.</param>
            <returns>Data for the specified tile.</returns>
        </member>
        <member name="T:Romulus.Nes.SmallExtendedNameTable`1.NameTableData">
            <summary>
            Contains references to name table data.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SmallExtendedNameTable`1.NameTableData.#ctor(Romulus.Nes.SmallExtendedNameTable{`0})">
            <summary>
            Inits this object.
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Romulus.Nes.SmallExtendedNameTable`1.NameTableData.Tiles">
            <summary>
            Gets/sets reference to pattern index data.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SmallExtendedNameTable`1.NameTableData.Palette">
            <summary>
            Gets/sets reference to palette index data.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SmallExtendedNameTable`1.NameTableData.Data">
            <summary>
            Gets/sets reference to extended data.
            </summary>
        </member>
        <member name="T:Romulus.Nes.TileEntry">
            <summary>
            Represents the tile index and attribute data for a single background tile.
            </summary>
        </member>
        <member name="F:Romulus.Nes.TileEntry.Tile">
            <summary>Pattern index.</summary>
        </member>
        <member name="F:Romulus.Nes.TileEntry.Palette">
            <summary>Palette index.</summary>
        </member>
        <member name="M:Romulus.Nes.TileEntry.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new TileEntry.
            </summary>
            <param name="tile">Pattern index.</param>
            <param name="pal">Palette index.</param>
        </member>
        <member name="T:Romulus.Nes.ExtendedTileEntry`1">
            <summary>
            Represents the tile index, attribute data, and extra data for a single background tile.
            </summary>
            <typeparam name="T">Extended data type</typeparam>
        </member>
        <member name="F:Romulus.Nes.ExtendedTileEntry`1.Tile">
            <summary>Pattern index.</summary>
        </member>
        <member name="F:Romulus.Nes.ExtendedTileEntry`1.Palette">
            <summary>Palette index.</summary>
        </member>
        <member name="F:Romulus.Nes.ExtendedTileEntry`1.Data">
            <summary>Extended data.</summary>
        </member>
        <member name="M:Romulus.Nes.ExtendedTileEntry`1.#ctor(System.Byte,System.Byte,`0)">
            <summary>
            Creates a new ExtendedTileEntry
            </summary>
            <param name="tile">Pattern index.</param>
            <param name="pal">Palette index.</param>
            <param name="data">Extended data.</param>
        </member>
        <member name="M:Romulus.Nes.ExtendedTileEntry`1.op_Implicit(Romulus.Nes.ExtendedTileEntry{`0})~Romulus.Nes.TileEntry">
            <summary>
            Defines an implicit conversion to the TileEntry structure (simulate polymorphism).
            </summary>
            <param name="t">Extended data type</param>
            <returns>A TileEntry stripped of extended data.</returns>
        </member>
        <member name="T:Romulus.Nes.ScreenView">
            <summary>Represents a screen within a ScreenViewport.</summary>
            <remarks>This class should be inherited to create a game or
            purpose specific screen view.</remarks>
        </member>
        <member name="F:Romulus.Nes.ScreenView.ScreenImageWidth">
            <summary>Gets the width of the screen image.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenView.ScreenImageHeight_Full">
            <summary>Gets the height of the screen image.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenView.ScreenImageHeight_Clipped">
            <summary>Gets the height of an NTSC display.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.#ctor">
            <summary>
            Creates a new ScreenView.
            </summary>
            <remarks>The ScreenView will create its own back buffer,
            ScreenRenderer, and blitter.</remarks>
        </member>
        <member name="F:Romulus.Nes.ScreenView.ScreenBitmap">
            <summary>The screen image is drawn to this buffer.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenView.screenRenderer">
            <summary>Takes screen data and renders a screen image using a Graphic.Blitter object.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.CreateScreenRenderer">
            <summary>
            This method should be overridden in a derived class that
            needs to use a custom NameTableRenderer.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.on_HostViewportChanged(System.Object,Romulus.EventArgs{System.Drawing.Point})">
            <summary>Handles the HostViewportChanged event.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.GetScreenImage">
            <summary>
            Gets the back-buffer containing the rendered screen image.
            </summary>
            <returns>A bitmap containing the screen image.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenView.Invalidate(System.Drawing.Graphics)">
            <summary>
            Causes this ScreenView to be redrawn in the ScreenViewport by raising the Paint event. 
            </summary>
            <remarks>The screen will not be re-rendered. This is a UI-related painting function.</remarks>
            <param name="g">The graphics object the screen will be drawn to.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.Invalidate(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Causes this ScreenView to be redrawn in the ScreenViewport by raising the Paint event. 
            </summary>
            <remarks>The screen will not be re-rendered. This is a UI-related painting function.</remarks>
            <param name="g">The graphics object the screen will be drawn to.</param>
            <param name="worldClipRect">A clipping rectangle to be used during painting.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Called to redraw the ScreenView's buffer contents to the containing control.
            </summary>
            <param name="g">The graphics object used to draw to the control.</param>
            <param name="controlClipRect">The rectangle one the ScreenViewport that will be drawn to by this ScreenView.</param>
            <param name="clippedSourceRect">The portion of the buffer that will be drawn to the ScreenViewport.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.Redraw">
            <summary>
            Renders and invalidates this screen editor.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.Invalidate">
            <summary>
            Causes the ScreenViewport to repaint this ScreenView.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.InvokeGetFocus">
            <summary>
            Called by host control to indicate focus has been recieved.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.InvokeLoseFocus">
            <summary>
            Called by host control to indicate focus has been lost.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnGetFocus">
            <summary>
            Called when this ScreenView gets focus.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnLoseFocus">
            <summary>
            Called when this ScreenView loses focus.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.RenderScreen">
            <summary>Constructs the nametable and renders a game-screen image. This does not involve actually
            painting the game-screen to the control.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnBeforeRender">
            <summary>
            Override this method to do any initialization needed before rendering.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.RunRenderLogic">
            <summary>Runs all render logic. This includes setting up palettes, and patterns, 
            the nametable, and sprites, performing the actual rendering, and any cleanup needed.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.CreateRenderData">
            <summary>Creates nametable and sprite data.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.DoConstructSpriteList">
            <summary>
            Clears the sprite list and calls the virtual method that creates the sprite list.
            This (sealed) method separates the logic of clearing the sprite list and adding sprites to the list.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnConstructSpriteList(Romulus.Nes.NameTableRenderer)">
            <summary>Override to construct the sprite list.</summary>
            <param name="nametable">The nametable to write sprite data to.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.DoClearSpriteList">
            <summary>
            Calls OnClearSpriteList, and unless the event method opts to cancel the clear operation,
            the sprite list will be cleared.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnClearSpriteList(System.ComponentModel.CancelEventArgs)">
            <summary>
            Override this method if it may be necessary to NOT clear the sprite list.
            </summary>
            <param name="cancel">Use this object to cancel the clearing of the sprite list.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnConstructNametable">
            <summary>
            Override this method to provide name-table creation logic.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.RunPaletteLogic">
            <summary>Executes the logic for getting palette data and applying it to the backbuffer.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.ApplySpritePalette(Romulus.Nes.CompositePalette,System.Int32)">
            <summary>
            Override this method to change the usage or application of palettes to the backbuffer. Do not
            override this method to change which colors will be used for sprites.
            </summary>
            <param name="spritePalette">The colors that will be used for sprites.</param>
            <param name="paletteIndex">The location where sprite palette data should be used.</param>
            <remarks>This method should not be overridden except in scenarios where you need to change the
            way that the backbuffer's palette is used. This need could arise from using a custom blitter
            that uses palettes differently, or from needing to use additional colors in addition to the
            specified palette.</remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenView.ApplyBgPalette(Romulus.Nes.CompositePalette,System.Int32)">
            <summary>
            Override this method to change the usage or application of palettes to the backbuffer. Do not
            override this method to change which colors will be used for backgrounds.
            </summary>
            <param name="palette">The colors that will be used for backgrounds.</param>
            <param name="paletteIndex">The location where background palette data should be used.</param>
            <remarks>This method should not be overridden except in scenarios where you need to change the
            way that the backbuffer's palette is used. This need could arise from using a custom blitter
            that uses palettes differently, or from needing to use additional colors in addition to the
            specified palette.</remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnLoadBgPalette(Romulus.ReturnEventArgs{Romulus.Nes.CompositePalette})">
            <summary>
             Override this method to specify a background palette for the ScreenView.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnLoadSpritePalette(Romulus.ReturnEventArgs{Romulus.Nes.CompositePalette})">
            <summary>
             Override this method to specify a background palette for the ScreenView.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.RunRenderer(Romulus.Nes.NameTableRenderer)">
            <summary>
            Executes the logic of the actual rendering.
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="F:Romulus.Nes.ScreenView.customRenderDelegate">
            <summary>
            Stores a reference to the RunCustomRender method. This needs to be passed
            to the NameTableRenderer to have it invoke CustomRender during rendering.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.RunCustomRender(Romulus.Nes.Blitter)">
            <summary>
            Invokes the CustomRender method. A delegate for this method must be passed 
            to the NameTableRenderer to have it invoke CustomRender during rendering.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.CustomRender(Romulus.Nes.Blitter)">
            <summary>
            Override this method to perform additional rendering after the nametable is rendered.
            </summary>
            <remarks>
            This function is not called directly by the ScreenView. Instead, it is called
            by the NameTableRenderer. Therefore, using a custom NameTableRenderer could
            potentially affect the behavior or usage of this function.
            </remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnAfterRender">
            <summary>
            Override this method to run logic after the screen render is complete.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.Dispose">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.InvokeMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Used by ScreenViewport to notify this control of a mouse-down.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.InvokeMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Used by ScreenViewport to notify this control of a mouse move.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.InvokeMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Used by the ScreenViewPort to notify this control of a mose up.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnMouseUp(System.Windows.Forms.MouseEventArgs,System.Int32,System.Int32)">
            <summary>
            Override this method to handle the mouse-up event.
            </summary>
            <param name="e">The mouse event args for the containing control.</param>
            <param name="screenX">The mouse position relative to this ScreenView.</param>
            <param name="screenY">The mouse position relative to this ScreenView.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Int32,System.Int32)">
            <summary>
            Override this method to handle the mouse-down event.
            </summary>
            <param name="e">The mouse event args for the containing control.</param>
            <param name="screenX">The mouse position relative to this ScreenView.</param>
            <param name="screenY">The mouse position relative to this ScreenView.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenView.OnMouseMove(System.Windows.Forms.MouseEventArgs,System.Int32,System.Int32)">
            <summary>
            Override this method to handle the mouse-move event.
            </summary>
            <param name="e">The mouse event args for the containing control.</param>
            <param name="screenX">The mouse position relative to this ScreenView.</param>
            <param name="screenY">The mouse position relative to this ScreenView.</param>
        </member>
        <member name="E:Romulus.Nes.ScreenView.BeforeRender">
            <summary>Handle this event to run logic immediately before rendering.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.ConstructSpriteList">
            <summary>Handle this event to supply a list of sprites to render.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.AfterRender">
            <summary>Handle this event to perform logic immediately after rendering is complete.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.ClearSpriteList">
            <summary>Handle this event to prevent the sprite list from being cleared each frame.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.LoadSpritePalette">
            <summary>Handle this event to specify a background palette for the ScreenView.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.LoadBgPalette">
            <summary>Handle this event to specify a background palette for the ScreenView.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenView.ConstructNametable">
            <summary>Handle this event to supply the data used to render the background.</summary>
            <remarks>Although a ScreenViewport can implement behavior by handling this event,
            the preferred method is creating a class that inherits ScreenView and overrides protected members.</remarks>
        </member>
        <member name="P:Romulus.Nes.ScreenView.IsEmpty">
            <summary>
            Returns true if this is an EmptyScreenView.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.GridLocation">
            <summary>
            Gets/sets the grid location of this ScreenView within the ScreenViewport.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.NameTable">
            <summary>
            Gets this ScreenView's nametable.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.Patterns">
            <summary>
            Gets/sets the background pattern table used in this screen.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.SpritePatterns">
            <summary>
            Gets/sets the sprite pattern table used in this screen.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenView.Paint">
            <summary>
            Raised when the ScreenView is drawing its backbuffer to the ScreenViewport control.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.Host">
            <summary>
            Gets the ScreenViewHost that contains this ScreenView.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.Rom">
            <summary>
            Gets the ROM image to load data from
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.HasFocus">
            <summary>
            Returns true if this ScreenView has input focus.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenView.GetFocus">
            <summary>
            Raised when this ScreenView recieves input focus.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenView.LoseFocus">
            <summary>
            Raised when this ScreenView loses input focus.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.Renderer">
            <summary>
            Gets the NameTableRenderer used by this ScreenView.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.SelectionColor">
            <summary>
            The color used for the selection rectangle.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.Selection">
            <summary>
            The location to draw the selection rectangle. Specify Rectangle.Empty to hide the
            selection rectangle.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.WorldBounds">
            <summary>
            Gets the location of this ScreenView within the entire scrollable area of the ScreenViewport.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenView.ScreenBounds">
            <summary>
            Gets the location of this ScreenView within the visible portion of the ScreenViewport.
            </summary>
        </member>
        <member name="T:Romulus.Nes.HighlightEffect">
            <summary>Enumerates possible highlight effects for objects in a ScreenControl.</summary>
        </member>
        <member name="F:Romulus.Nes.HighlightEffect.Invert">
            <summary>The object is inverted.</summary>
        </member>
        <member name="F:Romulus.Nes.HighlightEffect.Lighten">
            <summary>The object is displayed using lighter colors</summary>
        </member>
        <member name="F:Romulus.Nes.HighlightEffect.LightenInvertBack">
            <summary>The object is displayed using lighter colors on an inverted background</summary>
        </member>
        <member name="F:Romulus.Nes.HighlightEffect.InvertBack">
            <summary>The object is displayed on an inverted background</summary>
        </member>
        <member name="T:Romulus.Nes.OnPaintEventArgs">
            <summary>
            Event args used for the ScreenView painting events.
            </summary>
        </member>
        <member name="M:Romulus.Nes.OnPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Creates an OnPaintEventArgs object.
            </summary>
            <param name="g">The graphics object to draw to.</param>
            <param name="invalid">Invalid rectangle.</param>
            <param name="source">Source rectangle.</param>
        </member>
        <member name="P:Romulus.Nes.OnPaintEventArgs.InvalidControlRect">
            <summary>
            The rectangle, in control coordinates, that this ScreenView needs to paint.
            </summary>
        </member>
        <member name="P:Romulus.Nes.OnPaintEventArgs.ClippedSourceRect">
            <summary>
            The rectangle, in game-screen coordinates, of the game-screen image that will be drawn to update the control.
            </summary>
        </member>
        <member name="P:Romulus.Nes.OnPaintEventArgs.Graphics">
            <summary>
            The Graphics object that will be used for drawing.
            </summary>
        </member>
        <member name="T:Romulus.Nes.EmptyScreenView">
            <summary>
            Used to represent empty screens, for example, outside the bounds of a room.
            </summary>
            <remarks>
            This is a special class. It provides no implementation. Instead, it is handled 
            specially when encountered by a ScreenViewport.
            </remarks>
        </member>
        <member name="T:Romulus.Plugin.IDataTypeConverter">
            <summary>
            Defines the interface for a type converter. Any class
            that implements this interface should also directly
            declare a ClipboardConverterAttribute. Derived classes
            do not inherit this attribute.
            </summary>
            <remarks>The conversion an IDataTypeConverter provides
            is not necessarily guarunteed to "round-trip", i.e. it
            may not be possible successfully convert a data type back and
            fourth between two types without some loss of data, even if
            there is a conversion defined each way.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IDataTypeConverter.CanConvert(System.Object)">
            <summary>
            Returns true or false to indicate whether the object can be converted.
            </summary>
            <param name="data">The object to test.</param>
            <returns>True or false to indicate whether the object can be converted.</returns>
            <remarks><para>Generally, CanConvert should return false for null values. The
            exception is if null is particularly meaningful for a conversion, but
            I can't think of an example.</para>
            <para>Although it is largely preferable that CanConvert
            always return false for a conversion that will fail, it
            is also important that CanConvert performs reasonably quickly
            in case a large number of possible conversions need to be tested, so it
            may be impractical to check every possible corner-case where
            conversion may fail. It is permissible to throw a DataConversionException
            from the convert method for unforseen failures. Any other exceptions
            should be wrapped in a DataConversionException.</para></remarks>
        </member>
        <member name="M:Romulus.Plugin.IDataTypeConverter.Convert(System.Object)">
            <summary>
            Converts an object from one data type to another.
            </summary>
            <param name="data">The object to convert.</param>
            <returns>An object of a different type but of
            equivalent value.</returns>
            <remarks>Although it is largely preferable that CanConvert
            always return false for a conversion that will fail, it
            is also important that CanConvert performs reasonably quickly
            in case a large number of possible conversions need to be tested, so it
            may be impractical to check every possible corner-case where
            conversion may fail. It is permissible to throw a DataConversionException
            from the convert method for unforseen failures. Any other exceptions
            should be wrapped in a DataConversionException.</remarks>
        </member>
        <member name="T:Romulus.Plugin.IDataTypeConverter`2">
            <summary>
            Defines the interface for a type converter. Any class
            that implements this interface should also directly
            declare a ClipboardConverterAttribute. Derived classes
            do not inherit this attribute.
            </summary>
            <remarks><para>The non-generic interface IDataTypeConverter
            is generally more flexible and useful since the types to be converted
            to and from will not be known until run-item.</para>
            <para>The conversion an IDataTypeConverter provides
            is not necessarily guarunteed to "round-trip", i.e. it
            may not be possible successfully convert a data type back and
            fourth between two types without some loss of data, even if
            there is a conversion defined each way.</para></remarks>    
        </member>
        <member name="M:Romulus.Plugin.IDataTypeConverter`2.CanConvert(`1)">
            <summary>
            Returns true or false to indicate whether the object can be converted.
            </summary>
            <param name="data">The object to test.</param>
            <returns>True or false to indicate whether the object can be converted.</returns>
            <remarks><para>Generally, CanConvert should return false for null values. The
            exception is if null is particularly meaningful for a conversion, but
            I can't think of an example.</para>
            <para>Although it is largely preferable that CanConvert
            always return false for a conversion that will fail, it
            is also important that CanConvert performs reasonably quickly
            in case a large number of possible conversions need to be tested, so it
            may be impractical to check every possible corner-case where
            conversion may fail. It is permissible to throw a DataConversionException
            from the convert method for unforseen failures. Any other exceptions
            should be wrapped in a DataConversionException.</para></remarks>
        </member>
        <member name="M:Romulus.Plugin.IDataTypeConverter`2.Convert(`1)">
            <summary>
            Converts an object from one data type to another.
            </summary>
            <param name="data">The object to convert.</param>
            <returns>An object of a different type but of
            equivalent value.</returns>
            <remarks>Although it is largely preferable that CanConvert
            always return false for a conversion that will fail, it
            is also important that CanConvert performs reasonably quickly
            in case a large number of possible conversions need to be tested, so it
            may be impractical to check every possible corner-case where
            conversion may fail. It is permissible to throw a DataConversionException
            from the convert method for unforseen failures. Any other exceptions
            should be wrapped in a DataConversionException.</remarks>
        </member>
        <member name="T:Romulus.Plugin.IDataTypeConverterExt">
            <summary>
            Provides concrete instance methods to IDataTypeConverter.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IDataTypeConverterExt.GetClipboardAttribute(Romulus.Plugin.IDataTypeConverter)">
            <summary>
            Returns the information regarding clipboard use of an IDataTypeConverter.
            </summary>
            <param name="converter">The object to get data for.</param>
            <returns>The information regarding clipboard use of an IDataTypeConverter.</returns>
        </member>
        <member name="T:Romulus.Nes.Rom">
            <summary>
            Represents a headered ROM. Contains the ROM image
            and provides utility methods for dealing with the ROM.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Rom.HeaderSize">
            <summary>
            The size, in bytes, of and iNES header.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Rom.data">
            <summary>
            Gets the raw byte buffer of the ROM image.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Rom.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a Rom object from a stream, with a specicified size.
            </summary>
            <param name="s">The stream to load from.</param>
            <param name="size">The size of the ROM image to load from the stream.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.#ctor(System.IO.Stream)">
            <summary>
            Creates a Rom object from a stream.
            </summary>
            <param name="s">The stream to load from. The stream must support the Length and Position properties.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.#ctor(System.String)">
            <summary>
            Loads a ROM from a file.
            </summary>
            <param name="filePath">The path of the file to load.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.#ctor(System.Byte[])">
            <summary>
            Loads a ROM from a byte array.
            </summary>
            <param name="data">The ROM image with a header.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.LoadData(System.IO.Stream,System.Int32)">
            <summary>
            Loads ROM data from a stream.
            </summary>
            <param name="s">Stream to load from.</param>
            <param name="size">Number of bytes to load.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.BeforeSave">
            <summary>
            Call this method to before saving the ROM. This method commits changes (as if CommitChanges were called),
            and derived classes may do additional work before saving.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Rom.OnBeforeSave">
            <summary>
            Override to perform any necessary tasks or serialize any non-rom-image-backed data objects
            before the ROM is saved.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Rom.CommitChanges">
            <summary>
            Instructs the Rom object to commit any edits to the ROM image. Call
            this method when an up-to-date ROM image is necessary.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Rom.GetPtr(Romulus.Nes.pHRom)">
            <summary>
            Gets a pointer from the ROM image.
            </summary>
            <param name="offset">The offset of the pointer.</param>
            <returns>A pointer.</returns>
        </member>
        <member name="M:Romulus.Nes.Rom.SetPtr(Romulus.Nes.pCpu,Romulus.Nes.pHRom)">
            <summary>
            Writes a pointer to the ROM image.
            </summary>
            <param name="value">The pointer to write.</param>
            <param name="offset">The location to write the pointer.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.GetTablePtr(Romulus.Nes.pHRom,System.Int32)">
            <summary>
            Gets a pointer from a pointer table. (Consider using
            the PointerTable class for frequent access to a pointer table.)
            </summary>
            <param name="TableOffset">The offset of the pointer.</param>
            <param name="index">The index of the pointer.</param>
            <returns>A pointer from the pointer table.</returns>
        </member>
        <member name="M:Romulus.Nes.Rom.SetTablePtr(Romulus.Nes.pCpu,Romulus.Nes.pHRom,System.Int32)">
            <summary>
            Writes a pointer to a pointer table.
            </summary>
            <param name="value">The pointer to write.</param>
            <param name="tableOffset">The location of the pointer table.</param>
            <param name="index">The index of the pointer.</param>
        </member>
        <member name="M:Romulus.Nes.Rom.GetSinglePalette(Romulus.Nes.pHRom)">
            <summary>
            Returns a SinglePalette that references palette data
            in the ROM image.
            </summary>
            <param name="offset">The offset of the palette.</param>
            <returns>A SinglePalette object that references ROM data.</returns>
        </member>
        <member name="M:Romulus.Nes.Rom.GetCompositePalette(Romulus.Nes.pHRom)">
            <summary>
            Returns a CompositePalette that references palette data
            in the ROM image.
            </summary>
            <param name="offset">The offset of the palette.</param>
            <returns>A CompositePalette object that references ROM data.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Romulus.Nes.Rom.GetObject``1(Romulus.Nes.pHRom)" -->
        <member name="M:Romulus.Nes.Rom.SetObject``1(Romulus.Nes.pHRom,``0)">
            <summary>
            Writes miscellaneous data strucutre to the ROM.
            </summary>
            <typeparam name="T">The data type to write. Must be a structure.</typeparam>
            <param name="offset">The location to write the data to.</param>
            <param name="value">The data to be written.</param>
            <remarks><para>This method writes data to the ROM image byte for byte. This only
            works with structures. The structure must be fixed length and should not 
            contain any reference-type variable, including arrays.</para>
            Example:
            <code>
            public struct enemyData { // 3-byte data structure
                public byte enemyType; // Byte 1 = enemy type
                public byte screenX;   // Byte 2 = screen x coordinate
                public byte screenY;   // Byte 3 = screen y coordinate
            }
            
            // Usage - Write data to ROM
            pHRom enemyDataLocation = (pHRom)0x2468;
            SetObject(enemyDataLocation, someEnemy);
            </code></remarks>
            <seealso cref="M:Romulus.Nes.Rom.GetObject``1(Romulus.Nes.pHRom)"/>
        </member>
        <member name="M:Romulus.Nes.Rom.GetMD5">
            <summary>
            Gets an MD5 hash of the ROM data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Romulus.Nes.Rom.op_Implicit(Romulus.Nes.Rom)~System.Byte[]">
            <summary>
            Defines an implicit conversion from Rom
            to byte[]. This is a convenience for calling functions tha
            expect a ROM image as a byte array.
            </summary>
            <param name="rom">The rom to get byte data for.</param>
            <returns>A byte array containing the ROM image.</returns>
        </member>
        <member name="P:Romulus.Nes.Rom.MinimumRomSize">
            <summary>
            Returns the minimum size this type of ROM should be. (Override to specify in a derived class.)
            </summary>
        </member>
        <member name="P:Romulus.Nes.Rom.UnmodifiedHash">
            <summary>
            Gets the MD5 hash of the ROM in its unmodified state.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Rom.IsModified">
            <summary>
            Returns true if the ROM has been modified. In derived classes it may be
            necessary to call CommitChanges first so that any modified ROM data
            is written to the ROM image in memory.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Rom.Mappers">
            <summary>
            Gets the MapperController for this Rom.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Rom.Item(System.Int32)">
            <summary>
            Gets a byte from the ROM image at the specified offset.
            </summary>
            <param name="offset">The offset of the data to get.</param>
            <returns>The data at the specified offset.</returns>
        </member>
        <member name="P:Romulus.Nes.Rom.Item(Romulus.Nes.pHRom)">
            <summary>
            Gets a byte from the ROM image at the specified offset.
            </summary>
            <param name="offset">The offset of the data to get.</param>
            <returns>The data at the specified offset.</returns>
        </member>
        <member name="P:Romulus.Nes.Rom.Header">
            <summary>
            Gets the ROM header information.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Rom.PrgOffset">
            <summary>
            Returns the offset of the PRG ROM image
            within this ROM file.
            </summary>
            <remarks>The Rom class does not support ROMs with
            "trainers", although this is part of the .nes ROM format
            specification. If a ROM image includes a trainer, the
            value returned by this property will instead point
            to the trainer.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Romulus.Nes.Rom.ChrOffset" -->
        <member name="T:Romulus.Nes.Rom`1">
            <summary>
            Represents a headered ROM. Contains the ROM image
            and provides utility methods for dealing with the ROM.
            </summary>
            <typeparam name="TMapper">A mapper controller to use with the ROM. Specify NoMapper
            if no mapper is needed.</typeparam>
        </member>
        <member name="M:Romulus.Nes.Rom`1.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a Rom object from a stream, with a specicified size.
            </summary>
            <param name="s">The stream to load from.</param>
            <param name="size">The size of the ROM image to load from the stream.</param>
        </member>
        <member name="M:Romulus.Nes.Rom`1.#ctor(System.IO.Stream)">
            <summary>
            Creates a Rom object from a stream.
            </summary>
            <param name="s">The stream to load from. The stream must support the Length and Position properties.</param>
        </member>
        <member name="M:Romulus.Nes.Rom`1.#ctor(System.Byte[])">
            <summary>
            Loads a ROM from a byte array.
            </summary>
            <param name="data">The ROM image with a header.</param>
        </member>
        <member name="M:Romulus.Nes.Rom`1.#ctor(System.String)">
            <summary>
            Loads a ROM from a file.
            </summary>
            <param name="filePath">The path of the file to load.</param>
        </member>
        <member name="M:Romulus.Nes.Rom`1.Initialize">
            <summary>
            Initializes the ROM object.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Rom`1.CreateMapperController">
            <summary>
            Override this method to use a custom mapper object.
            </summary>
            <returns>Return the MapperController object to be used with this Rom.</returns>
            <remarks>By defualt, the Rom class will try to create its mapper object
            by searching the type specified by TMapper for a constructor that accepts
            only a Rom object. If the desired MapperController class has no such constructor,
            or a different constructor must be used, override this method to create and
            return a MapperController object.
            </remarks>
        </member>
        <member name="P:Romulus.Nes.Rom`1.Mappers">
            <summary>
            Gets the MapperController for this Rom.
            </summary>
        </member>
        <member name="T:Romulus.Graphic.ColorFilters">
            <summary>
            Defines a set of basic color filters that modify a System.Drawing.Color object.
            </summary>
        </member>
        <member name="F:Romulus.Graphic.ColorFilters.Darken">
            <summary>Color filter to darken colors.</summary>
        </member>
        <member name="F:Romulus.Graphic.ColorFilters.Brighten">
            <summary>Color filter to brighten colors.</summary>
        </member>
        <member name="F:Romulus.Graphic.ColorFilters.Intensify">
            <summary>Color filter to intensify colors.</summary>
        </member>
        <member name="F:Romulus.Graphic.ColorFilters.Invert">
            <summary>Color filter to invert colors.</summary>
        </member>
        <member name="T:Romulus.Graphic.ColorFilter">
            <summary>Represents a function that modifies a Color
            object, generally used to modify a color palette.</summary>
            <param name="original">The color that will be modified.</param>
            <returns>The specified color after having the filter applied.</returns>
        </member>
        <member name="T:Romulus.ActionQueue`2">
            <summary>
            Manages a list of actions that can be done and undone.
            </summary>
            <typeparam name="TQ">The queue type. This type parameter should be set to the declaring type (self-referencing).</typeparam>
            <typeparam name="TAction">The action type. This type must inherit from the declaring type's nested Action class.</typeparam>
        </member>
        <member name="T:Romulus.ActionQueue">
            <summary>
            Provides a nongeneric base class for the ActionQueue class.
            </summary>
        </member>
        <member name="T:Romulus.ActionQueue.ActionState">
            <summary>
            Represents the state of an action.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue.ActionState.NotDone">
            <summary>
            The action has not yet been performed.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue.ActionState.Done">
            <summary>
            The action has been performed.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue.ActionState.Undone">
            <summary>
            The action has been performed and then undone.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue.ActionState.Discarded">
            <summary>
            The action is discarded and in an invalid state.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.#ctor">
            <summary>
            Creates a new ActionQueue.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue`2.undos">
            <summary>Undo stack.</summary>
        </member>
        <member name="F:Romulus.ActionQueue`2.redos">
            <summary>Redo stack.</summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.DontCombineNextAction">
            <summary>
            Call this method to prevent the next action to be performed
            from being combined with previous actions.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Undo">
            <summary>Undoes one action and returns the action that was undone.</summary>
            <returns>The action that was undone.</returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.Redo">
            <summary>Redoes one action and returns the action that was done.</summary>
            <returns>The action that was redone.</returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.Do(`1)">
            <summary>
            Adds the specified action to the queue and performs the action.
            </summary>
            <param name="a">The action to perform.</param>
        </member>
        <member name="M:Romulus.ActionQueue`2.Clear">
            <summary>
            Clears all undos and redos.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.CropUndos">
            <summary>Removes the oldest undo actions if the queue has more actions that are allowed by MaxQueueSize.</summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.CropRedos">
            <summary>Removes the least recently undone actions if the queue has more actions than allowed by MaxQueueSize. This seems
            superfluous since there should never be too many actions when this method would be called.</summary>
        </member>
        <member name="E:Romulus.ActionQueue`2.ActionDone">
            <summary>
            Rasied when an action is done or redone.
            </summary>
        </member>
        <member name="E:Romulus.ActionQueue`2.ActionUndone">
            <summary>
            Raised when an action is undone.
            </summary>
        </member>
        <member name="E:Romulus.ActionQueue`2.ActionsCombined">
            <summary>
            Raised when two actions are combined into a single action.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Undos">
            <summary>
            Gets a list of available undos.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Redos">
            <summary>
            Gets a list of available redos.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.MaxQueueSize">
            <summary>
            Gets/sets the maximum number of actions the queue will hold.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.CombineActions">
            <summary>
            If true, actions that can be combined will be. (This behavior is 
            defined by the Action objects.)
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.dontCombineNextAction">
            <summary>
            If true, the queue wont try to combine the next action with the most recent.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.CanUndo">
            <summary>
            Returns true if there are actions to undo.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.UndoText">
            <summary>
            Returns the text of the first undo action.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.UndoCount">
            <summary>
            Gets the number of undo actions available.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.CanRedo">
            <summary>
            Returns true if there are actions to redo.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.RedoText">
            <summary>
            Returns the text of the first redo action.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.RedoCount">
            <summary>
            Returns the number of redo actions available.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.TotalCount">
            <summary>
            Gets the total number of undo and redo actions.
            </summary>
        </member>
        <member name="T:Romulus.ActionQueue`2.ActionArgs">
            <summary>
            Event agrs for an action
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.ActionArgs.#ctor(`1)">
            <summary>
            Creates an ActionArgs.
            </summary>
            <param name="action">The action the event is for.</param>
        </member>
        <member name="P:Romulus.ActionQueue`2.ActionArgs.Action">
            <summary>
            Gets the action the event is for.
            </summary>
        </member>
        <member name="T:Romulus.ActionQueue`2.Action">
            <summary>
            An action that can be done or undone with an ActionQueue.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue`2.Action.doAction">
            <summary>
            A delegate that defines what the action does.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue`2.Action.undoAction">
            <summary>
            A delegate that defines that the action undoes.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.#ctor">
            <summary>
            Creates a new action.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.#ctor(Romulus.SimpleAction,Romulus.SimpleAction)">
            <summary>
            Creates a new action with behavior defined by a pair of delegates.
            </summary>
            <param name="doAction">The delegate defining the do action.</param>
            <param name="undoAction">The delegate defining the undo action.</param>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.Init(`0)">
            <summary>
            Allows the queue to initialize the action.
            </summary>
            <param name="queue">The queue to which the action will belong.</param>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.Do">
            <summary>
            Performs the action.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.PerformInit">
            <summary>
            Override this method to do initialization.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.OnBeforeFirstDo">
            <summary>
            Override this method to run code before the first call to Do.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.PerformDo">
            <summary>Override this method to provide logic for the action, OR specify a delegate
            in the constructor. Overriding this method without calling the base method will
            cause the delegate to not be invoked.</summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.PerformUndo">
            <summary>Override this method to provide logic for the action, OR specify a delegate
            in the constructor. Overriding this method without calling the base method will
            cause the delegate to not be invoked.</summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.OnBeforeDiscard">
            <summary>Override this method if any cleanup must be performed before the action is permanently removed from the queue.</summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.TryCombine(`1)">
            <summary>
            Tries to combine two actions if they are compatible.
            </summary>
            <param name="olderAction">The older action to combine this action with.</param>
            <returns>A new Action object representing both actions as a single operation, or null
            if the actions could not be combined.</returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.tryToCombine(`1)">
            <summary>
            Override this method if this action can be combined with another action to create an action that is inclusive of both.
            The two objects must be the same exact concrete type unless combinedActionMustBeSameType is overridden to return true.
            Return null to indicate that the objects could not be combined.
            </summary>
            <param name="olderAction"></param>
            <returns></returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.Action.OnCombined(`1)">
            <summary>
            Called when an action is combined with a newer action.
            </summary>
            <param name="newerAction"></param>
        </member>
        <member name="P:Romulus.ActionQueue`2.Action.Queue">
            <summary>
            The owning queue.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Action.State">
            <summary>
            The state of the action.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Action.isInitialized">
            <summary>
            Gets whether this action has been initialized by the queue.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Action.Text">
            <summary>Gets the description of this action.</summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.Action.combinedActionMustBeSameType">
            <summary>
            Override this proprety and return false if this action can be combined with actions of other types.
            The value returned by combineActionMustBeSameType for the OLDER action is not taken into consideration.
            </summary>
        </member>
        <member name="T:Romulus.ActionQueue`2.ActionStack">
            <summary>
            Represents a list of available actions to do or undo.
            </summary>
        </member>
        <member name="F:Romulus.ActionQueue`2.ActionStack.stack">
            <summary>
            The underlying action stack.
            </summary>
        </member>
        <member name="M:Romulus.ActionQueue`2.ActionStack.#ctor(Romulus.TransparentStack{`1})">
            <summary>
            Creates an action stack.
            </summary>
            <param name="stack">The underlying action stack this class exposes.</param>
        </member>
        <member name="M:Romulus.ActionQueue`2.ActionStack.Peek">
            <summary>
            Returns the action at the top of the stack.
            </summary>
            <returns>The action at the top of the stack.</returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.ActionStack.Peek(System.Int32)">
            <summary>
            Returns the action at the specified depth in the stack.
            </summary>
            <param name="index">The depth in the stack from which to retrieve an action.</param>
            <returns>An action from the stack.</returns>
        </member>
        <member name="M:Romulus.ActionQueue`2.ActionStack.GetEnumerator">
            <summary>
            Implements IEnumerator.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:Romulus.ActionQueue`2.ActionStack.Count">
            <summary>
            Gets the number of actions in this stack.
            </summary>
        </member>
        <member name="P:Romulus.ActionQueue`2.ActionStack.Item(System.Int32)">
            <summary>
            Gets an action from the specified depth in the stack.
            </summary>
            <param name="i">The depth in the stack from which to retrieve an action.</param>
            <returns>An action from the stack.</returns>
        </member>
        <member name="T:Romulus.SimpleAction">
            <summary>
            Defines a parameterless function with no return.
            </summary>
        </member>
        <member name="T:Romulus.Nes.PatternData">
            <summary>
            Stores a number of patterns. Used to copy patterns between ROMs
            or to/from the clipboard.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternData.CopyToRom(System.Byte[],System.Int32)">
            <summary>
            Copies the pattern data to the ROM. 
            </summary>
            <param name="nesRomData"></param>
            <param name="offset"></param>
            <remarks>Tiles that are out of bounds (even partially) will not
            be copied, but no error will occur.</remarks>
        </member>
        <member name="P:Romulus.Nes.PatternData.GroupWidth">
            <summary>
            Gets/sets the width, in tiles, of the group of tiles.
            </summary>
            <remarks>Tiles may be copied/pasted in rectangular
            groups of tiles. These tiles won't be contiguous if
            the width of the group does not match that of the
            platform the patterns are for. For instance, with
            NES a row of patterns is 16 tiles wide. If a group
            had a width of two tiles and a total of four tiles,
            the tiles would be pasted at the relative indecies:
            0, 1, 16, and 17.</remarks>
        </member>
        <member name="T:Romulus.Nes.Mappers.NullMapper">
            <summary>
            This is a stub class which used for Rom objects where no mapper
            will be used.
            </summary>
            <seealso cref="T:Romulus.Nes.Mappers.NoMapper"/>
        </member>
        <member name="T:Romulus.Nes.Mapper`1">
            <summary>
            Represents an NES mapper.
            </summary>
            <remarks>
            <para>(This generic class simply inherits the non-generic mapper class
            to provide a self-referencing generic parameter for use with the MapperFactory class.)</para>
            <para>This class does not perform any bounds checks when accessing the ROM image. It
            is up to the user of the class to ensure that any offsets or addresses specified refer to
            locations within the bounds of the ROM image. (This is not the same issue as invalid addresses.)
            To avoid this kind of issue, ensure that the mapper only banks in existant, complete banks.</para>
            <para>It is up to the implementor of a mapper class as to whether a Mapper object should be mutable.
            In other words, depending on the implementation, a mapper may provide for 'bank swapping',
            or it may be necessary to obtain a seprate Mapper object for each bank to be accessed. Mapper objects
            should generally be immutable of the mapper can only specified a single 'hot' bank (i.e. only
            a single mapped bank is not fixed).</para>
            <para>When inheriting from this class, the inheriting class should 
            specify itself as the type parameter. For example, the MyMapper class
            would be defined as <c>public class MyMapper:Mapper&lt;MyMapper&gt;</c>. In other words,
            this is a self-referencing generic class.</para>
            </remarks>
            <typeparam name="TThis">Reference to the defining class. This is a self-referencing class.
            generic class.</typeparam>
        </member>
        <member name="T:Romulus.Nes.Mapper">
            <summary>
            Represents an NES mapper.
            </summary>
            <remarks>
            <para>This class does not perform any bounds checks when accessing the ROM image. It
            is up to the user of the class to ensure that any offsets or addresses specified refer to
            locations within the bounds of the ROM image. (This is not the same issue as invalid addresses.)
            To avoid this kind of issue, ensure that the mapper only banks in existant, complete banks.</para>
            <para>It is up to the implementor of a mapper class as to whether a Mapper object should be mutable.
            In other words, depending on the implementation, a mapper may provide for 'bank swapping',
            or it may be necessary to obtain a seprate Mapper object for each bank to be accessed. Mapper objects
            should generally be immutable of the mapper can only specified a single 'hot' bank (i.e. only
            a single mapped bank is not fixed).</para>
            <para>When inheriting from this class, the inheriting class should 
            specify itself as the type parameter. For example, the MyMapper class
            would be defined as <c>public class MyMapper:Mapper&lt;MyMapper&gt;</c>. In other words,
            this is a self-referencing generic class.</para>
            </remarks>
            <seealso cref="P:Romulus.Nes.Mapper.ThrowOnAddressError"/>
        </member>
        <member name="M:Romulus.Nes.Mapper.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates a mapper for the specified Rom.
            </summary>
            <param name="rom">The Rom to create a Mapper for.</param>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointerTable(System.Int32)">
            <summary>
            Gets the pointer table at the specified offset.
            </summary>
            <param name="offset">The offset of the pointer table.</param>
            <returns>The pointer table at the specified offset.</returns>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointerTable(Romulus.Nes.pHRom)">
            <summary>
            Gets the pointer table at the specified offset.
            </summary>
            <param name="offset">The offset of the pointer table.</param>
            <returns>The pointer table at the specified offset.</returns>
        </member>
        <member name="M:Romulus.Nes.Mapper.SetPointer(System.Int32,Romulus.Nes.pCpu)">
            <summary>
            Writes a pointer to the specified ROM offset.
            </summary>
            <param name="offset">The offset to write the pointer to.</param>
            <param name="value">The pointer to be written.</param>
        </member>
        <member name="M:Romulus.Nes.Mapper.SetPointer(Romulus.Nes.pHRom,Romulus.Nes.pCpu)">
            <summary>
            Writes a pointer to the specified ROM offset.
            </summary>
            <param name="offset">The offset to write the pointer to.</param>
            <param name="value">The pointer to be written.</param>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointer(System.Int32)">
            <summary>
            Gets a pointer from the specified ROM offset.
            </summary>
            <param name="offset">The offset of the pointer.</param>
            <returns>The pointer at the specified offset.</returns>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointer(Romulus.Nes.pHRom)">
            <summary>
            Gets a pointer from the specified ROM offset.
            </summary>
            <param name="offset">The offset of the pointer.</param>
            <returns>The pointer at the specified offset.</returns>
        </member>
        <member name="M:Romulus.Nes.Mapper.resolveAddress(Romulus.Nes.pCpu)">
            <summary>
            Override this method to define the mapping between a CPU address
            and a ROM offset. The returned value should not include the header.
            See remarks.
            </summary>
            <param name="pointer">The address to resolve.</param>
            <returns>An integer specifying a rom offset (unheadered), or a 
            negative value to indicate that the specified address does identify
            ROM data.</returns>
            <remarks>
            <para>This is the core of the Mapper class. This function defines the mapping of
            addresses used by the CPU to ROM data. The implementation of this function
            should simulate the behavior of specific mapper hardware.</para>
            <para>Generally, addresses from 0x8000 to 0xFFFF map to banked ROM data,
            while other addresses are used for other purposes (RAM, sound/graphic hardware,
            ect.). If the address specified by <paramref name="pointer"/> maps to ROM data,
            the returned value should be the absolute offset of the ROM data, <em>not including
            the header</em>.</para>
            <para>If the address specified does not map to ROM data, a negative value
            should be returned. Not performing range checks and failing to return this "error code"
            is undesirable since it can prevent software from detecting bad pointers and
            can corrupt ROM data.</para>
            <para>It is not required (or recommended) that bounds checks be performed on the returned
            rom offset. It is the responsibility of the user of this class to ensure that the ROM image
            does not contain incomplete ROM banks and that he is not accessing non-existant banks.</para>
            </remarks>
            
        </member>
        <member name="M:Romulus.Nes.Mapper.getAddress(System.Int32)">
            <summary>
            Override this method to convert valid ROM offsets to CPU addresses,
            and return pCpu.NullPointer for invalid ROM offsets.
            </summary>
            <param name="unheaderedOffset">The offset to convert.</param>
            <returns>The address the ROM offset is banked to. If the offset is
            not mapped to an address, return pCpu.NullPointer. If the offset is
            mapped to more than one address, the address of any swappable bank
            should be returned, unless none of the addresses occur in a swappable bank,
            in which case any valid address can be returned.</returns>
            <remarks>When implementing a mapper, override this method to return
            the address of banked data. Valid ROM offsets and addresses should be able 
            to "round-trip," as demonstrated in the following example.
            <code>
            pCpu address = (pCpu)0xABCD;
            pHRom offset = GetRomOffset(address);
            pCpu sameAddress = GetRomAddress(offset); // Should return 0xABCD
            </code>
            </remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper.ToAddress(Romulus.Nes.pHRom)">
            <summary>
            Gets the address that ROM data at a given offset will be banked to.
            </summary>
            <param name="offset">The offset of ROM data.</param>
            <returns>The address of the specifies ROM data, or pCpu.NullPointer if the specified offset does
            not refer to data that is banked in this mapper.</returns>
            <remarks>The behavior when an unmapped ROM offset is encountered is defined by
            the <see cref="P:Romulus.Nes.Mapper.ThrowOnAddressError"/> property.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper.ToAddress(Romulus.Nes.pUhRom)">
            <summary>
            Gets the address that ROM data at a given offset will be banked to.
            </summary>
            <param name="offset">The offset of ROM data.</param>
            <returns>The address of the specifies ROM data, or pCpu.NullPointer if the specified offset does
            not refer to data that is banked in this mapper.</returns>
            <remarks>The behavior when an unmapped ROM offset is encountered is defined by
            the <see cref="P:Romulus.Nes.Mapper.ThrowOnAddressError"/> property.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper.ResolvePointerWithCheckAndHeader(Romulus.Nes.pCpu)">
            <summary>Resolves the pointer, adjusts for the header, and throws an exception if the address is invalid
            and ThrowOnAddressError is true. If ThrowOnAddressError is false, the error code is simply returned.</summary>
        </member>
        <member name="M:Romulus.Nes.Mapper.ToOffset(Romulus.Nes.pCpu)">
            <summary>
            Gets the ROM offset that the specified address maps to.
            </summary>
            <param name="address">The address to check.</param>
            <returns>The offset the address maps to, or -1 if the address was invalid.</returns>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointer(Romulus.Nes.pCpu)">
            <summary>
            Gets a pointer found at the specified address.
            </summary>
            <param name="address">The address of the pointer.</param>
            <returns>A pointer found at the specified address.</returns>
            <remarks>The behavior when invalid addresses are encountered is defined
            by the ThrowOnError property.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper.SetPointer(Romulus.Nes.pCpu,Romulus.Nes.pCpu)">
            <summary>
            Writes a pointer to the specified address.
            </summary>
            <param name="address">The address to write the pointer to.</param>
            <param name="value">The pointer to be written.</param>
            <remarks>The behavior when invalid addresses are encountered is defined
            by the ThrowOnError property.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper.GetPointerTable(Romulus.Nes.pCpu)">
            <summary>
            Gets the pointer table at the specified address.
            </summary>
            <param name="address">The address of the pointer table.</param>
            <returns>The pointer table at the specified address.</returns>
            <remarks>The behavior when invalid addresses are encountered is defined
            by the ThrowOnError property.</remarks>
        </member>
        <member name="P:Romulus.Nes.Mapper.Rom">
            <summary>
            Gets the ROM this mapper is associated with.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mapper.ThrowOnAddressError">
            <summary>
            Gets/sets whether this mapper will throw an exception on invalid addresses.
            </summary>
            <remarks>If set to false, reads from invalid addresses will return
            zero or null values, and writes to invalid addresses will be ignored.
            Leaving this property set to true is advised. This does not affect
            overloads that accept a ROM offset.</remarks>
        </member>
        <member name="P:Romulus.Nes.Mapper.Item(System.Int32)">
            <summary>Gets/sets data from the ROM image.</summary>
            <param name="offset">The offset within the ROM image to get/set data from.</param>
            <returns>The value at the specified offset.</returns>
        </member>
        <member name="P:Romulus.Nes.Mapper.Item(Romulus.Nes.pHRom)">
            <summary>Gets/sets data from the ROM image.</summary>
            <param name="offset">The offset within the ROM image to get/set data from.</param>
            <returns>The value at the specified offset.</returns>
        </member>
        <member name="P:Romulus.Nes.Mapper.Item(Romulus.Nes.pCpu)">
            <summary>Gets/sets data from the ROM image.</summary>
            <param name="address">The address the ROM data is banked to.</param>
            <returns>The value at the specified address.</returns>
            <remarks>The behavior when invalid addresses are encountered is defined
            by the ThrowOnError property.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mapper`1.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates a mapper for the specified Rom.
            </summary>
            <param name="rom">The Rom to create a Mapper for.</param>
        </member>
        <member name="M:Romulus.Nes.Mapper`1.#ctor(Romulus.Nes.Rom,Romulus.Nes.MapperController{`0})">
            <summary>
            Creates a mapper for the specified Rom with the specifed owner.
            </summary>
            <param name="rom">The Rom to create a mapper for.</param>
            <param name="owner">The owning factory.</param>
        </member>
        <member name="P:Romulus.Nes.Mapper`1.Owner">
            <summary>
            Gets the mapper factory that created this mapper,
            if the mapper was created from a factory.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.NullMapper.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates a NoMapper object.
            </summary>
            <param name="rom">The ROM this object is used with.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Romulus.Nes.Mappers.NoMapper" -->
        <member name="T:Romulus.Nes.MapperController`1">
            <summary>
            Provides mapper objects for a ROM.
            </summary>
            <remarks>
            <para>(For implementors) When implementing a Mapper, a MapperFactory should also be implemented.
            The MapperFactory is required by the Rom object to provide Mapper objects.
            The MapperFactory should provide functions that return Mapper objects, generally
            providing sensible overloads (or additional functions) to the default indexer.</para>
            <para>Providing a constructor overload that accepts only a Rom is strongly suggested.
            If the mapper controller is configurable, and configuration must be specified in the constructor,
            then sensible defaults should be used with the constructor that accepts only a Rom. This is because,
            by default, when creating a MapperController, the Rom class looks for a constructor for which
            it only needs to specify a Rom.</para>
            <code>
            </code>
            <para>If the default indexer does not make sense for a given mapper (for example,
            a mapper may require several banks of a smaller size to be specified) it is
            acceptable to throw a MappingNotSupportedException. This also applies to the GetMapper method,
            but returning a default object is preferred.</para>
            </remarks>
            <typeparam name="TMapper">The mapper type this factory produces.</typeparam>
        </member>
        <member name="T:Romulus.Nes.MapperController">
            <summary>
            Provides mapper objects for a ROM.
            </summary>
            <remarks>
            <para>(For implementors) When implementing a Mapper, a MapperFactory should also be implemented.
            The MapperFactory is required by the Rom object to provide Mapper objects.
            The MapperFactory should provide functions that return Mapper objects, generally
            providing sensible overloads (or additional functions) to the default indexer.</para>
            <para>Providing a constructor overload that accepts only a Rom is strongly suggested.
            If the mapper controller is configurable, and configuration must be specified in the constructor,
            then sensible defaults should be used with the constructor that accepts only a Rom. This is because,
            by default, when creating a MapperController, the Rom class looks for a constructor for which
            it only needs to specify a Rom.</para>
            <code>
            </code>
            <para>If the default indexer does not make sense for a given mapper (for example,
            a mapper may require several banks of a smaller size to be specified) it is
            acceptable to throw a MappingNotSupportedException. This also applies to the GetMapper method,
            but returning a default object is preferred.</para>
            </remarks>
        </member>
        <member name="P:Romulus.Nes.MapperController.Rom">
            <summary>
            The ROM this factory provides mappers for.
            </summary>
        </member>
        <member name="M:Romulus.Nes.MapperController`1.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates a MapperFactory.
            </summary>
            <param name="rom">The Rom the factory creates mappers for.</param>
        </member>
        <member name="M:Romulus.Nes.MapperController`1.GetMapper">
            <summary>
            Gets a default mapper object.
            </summary>
            <returns>A mapper object.</returns>
            <remarks>If the returned mapper object does not allow swapping, 
            the indexer or another function should be used to access the correct bank.</remarks>
        </member>
        <member name="P:Romulus.Nes.MapperController`1.Item(System.Int32)">
            <summary>
            Gets a mapper for the specified bank.
            </summary>
            <param name="bank">The bank to access.</param>
            <returns>A mapper for the specified bank.</returns>
            <remarks>If the mapper has multiple swappable banks, another
            overload should be used. This indexer overload may
            throw an exception in these cases.</remarks>
        </member>
        <member name="M:Romulus.Nes.Mappers.NoMapper.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates a new NoMapper object.
            </summary>
            <param name="rom">The Rom this object is associated with.</param>
        </member>
        <member name="M:Romulus.Nes.Mappers.NoMapper.GetMapper">
            <summary>
            Returns a NullMapper object, which will throw an exception when asked
            to resolve a pointer.
            </summary>
            <returns>A NullMapper object.</returns>
        </member>
        <member name="P:Romulus.Nes.Mappers.NoMapper.Item(System.Int32)">
            <summary>
            Returns a NullMapper object, which will throw an exception when asked
            to resolve a pointer.
            </summary>
            <returns>A NullMapper object.</returns>
            <param name="bank">This parameter is disregarded.</param>
        </member>
        <member name="T:Romulus.NumberExtensions">
            <summary>
            Provides extensions for numerical types.
            </summary>
        </member>
        <member name="M:Romulus.NumberExtensions.GetLowerNibble(System.Byte)">
            <summary>
            Gets the lower nibble of a byte.
            </summary>
            <param name="b">The byte to examine.</param>
            <returns>A value between 0 and 15.</returns>
        </member>
        <member name="M:Romulus.NumberExtensions.GetUpperNibble(System.Byte)">
            <summary>
            Gets the upper nibble of a byte.
            </summary>
            <param name="b">The byte to examine.</param>
            <returns>A value between 0 and 15.</returns>
        </member>
        <member name="T:Romulus.Nes.ScreenViewManager">
            <summary>
            Manages the automatic creation and destruction of screen editors for a ScreenViewport
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.#ctor(Romulus.Nes.ScreenViewport)">
            <summary>Creates a new ScreenViewManager.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.on_hostWorldViewChanged(System.Object,Romulus.EventArgs{System.Drawing.Point})">
            <summary>
            Handles WorldViewChanged event.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.ForAllLoadedViews(System.Action{Romulus.Nes.ScreenView})">
            <summary>Performs an action on all loaded ScreenViews, empty views excluded.</summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.getAllLoadedViews">
            <summary>Returns an enumeratable collection of all loaded views.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.Paint(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a portion of the host ScreenView by asking any affected ScreenView objects
            to paint itself.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.PaintScans(System.Drawing.RectangleF[],System.Drawing.Graphics)">
            <summary>
            Takes a list of invalid rectangles and paints any affected ScreenView objects.
            This is used to optimize painting when the user scrolls. A single invalid
            rectangle would encompass the entire control, so we opt to instead process a list
            of "invalid scans" that add up to the non-rectangular region that needs to be drawn.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.CreateAndDestroyEditors">
            <summary>
            Creates any ScreenView objects necessary for screens scrolled into view,
            and destroys any unneeded ScreenView objects that have scrolled out of view.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.ReevaluateEmptyScreens">
            <summary>
            Re-examines which screens are empty versus which ones are loaded, and loads or unloads
            each screen as necessary. For example, this might be called when the user loads a different level
            which has a different shape, and therefore empty screens in different locations.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.CreateMissingEditors">
            <summary>
            Creates any ScreenViews that should be visible but are not created.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.DestroyHiddenEditors">
            <summary>
            Destroys any ScreenViews no longer needed.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.DestroyEditorByIndex(System.Int32)">
            <summary>
            Destroys a ScreenView.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.EnsureEditorExists(System.Int32,System.Int32)">
            <summary>
            Ensures that an editor exists at the specified map location if it is valid.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.OnScreenRendered(Romulus.CellIndex)">
            <summary>
            Raises the ScreenRendered event.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.GetViewAt(Romulus.CellIndex)">
            <summary>
            Returns the ScreenView at the specified location, or null if no screen editor exists at that location.
            </summary>
            <param name="gridLocation">The location to get the editor for.</param>
            <returns>A ScreenView object, or null of no ScreenView was found.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.GetViewAt(System.Int32,System.Int32)">
            <summary>
            Returns the ScreenView at the specified location, or null if no screen editor exists at that location.
            </summary>
            <param name="worldX">Location to check for a view at.</param>
            <param name="worldY">Location to check for a view at.</param>
            <returns>A ScreenView object, or null of no ScreenView was found.</returns>
        </member>
        <member name="F:Romulus.Nes.ScreenViewManager.mouseCapture">
            <summary>
            Records which ScreenView has mouse capture, meaning if the user
            presses the mouse button in one screen, then moves the mouse to another
            screen, mouse events will still be sent to the first screen until he lets
            go of the mouse button.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.SendMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the MouseDown event to the correct ScreenView.
            </summary>
            <param name="e">Mouse args using WORLD coordinates</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.SendMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the MouseMove event to the correct ScreenView.
            </summary>
            <param name="e">Mouse events in WORLD coordinates.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.SendMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the MouseUp event to the correct ScreenView.
            </summary>
            <param name="e">Mouse events in WORLD coordinates.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.Rerender(Romulus.CellIndex,System.Boolean)">
            <summary>
            Re-renders the specified map location.
            </summary>
            <param name="mapLocation">The location to re-render</param>
            <param name="invalidate">If true, the re-rendered map location will
            be updated on the computer screen.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.RerenderAll">
            <summary>
            Re-renders all loaded screens.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewManager.Rerender(System.Predicate{Romulus.Nes.ScreenView},System.Boolean)">
            <summary>
            Rerenders any screens that meet the specified condition.
            </summary>
            <param name="condition">Specifies the condition under which a screen will be re-rendered.</param>
            <param name="invalidate">If true, each re-rendered screen will be re-painted.</param>
        </member>
        <member name="P:Romulus.Nes.ScreenViewManager.AllVisibleViews">
            <summary>
            Gets a list of all ScreenViews in the control, comprised of all loaded views
            and any empty views to fill empty cells.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewManager.AllLoadedViews">
            <summary>
            Gets a list of all ScreenViews in the control except empty cells.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenViewManager.AddedScreen">
            <summary>
            Called after a ScreenView is added to the ScreenViewport.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenViewManager.RemovingScreen">
            <summary>
            Called before removing a ScreenView from the ScreenViewport.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenViewManager.ScreenRendered">
            <summary>Raised when a screen is rendered.</summary>
        </member>
        <member name="T:Romulus.Nes.MapperAddressException">
            <summary>
            Thrown when an attempt is made to access an address that is
            out of range via a Mapper object.
            </summary>
        </member>
        <member name="M:Romulus.Nes.MapperAddressException.#ctor(Romulus.Nes.pCpu)">
            <summary>
            Instantiates this exception with a default message.
            </summary>
            <param name="badPointer"></param>
        </member>
        <member name="P:Romulus.Nes.MapperAddressException.InvalidPointer">
            <summary>
            Gets the address that caused the exception.
            </summary>
        </member>
        <member name="T:Romulus.Nes.MappingNotSupportedException">
            <summary>
            Thrown when a request is made for a
            mapper that is not available from a MapperFactory.
            </summary>
        </member>
        <member name="M:Romulus.Nes.MappingNotSupportedException.#ctor">
            <summary>
            Creates a new MappingNotSupportedException.
            </summary>
        </member>
        <member name="F:Romulus.PaletteDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Romulus.PaletteDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Romulus.PaletteDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Romulus.Nes.Mappers.CxRomController">
            <summary>
            Represents CxROM hardware.
            </summary>
            <remarks>CxROM does not support bank switching. Only
            one mapper object is provided, which can be obtained by
            calling GetMapper.</remarks>
        </member>
        <member name="T:Romulus.Converters.PatternToBitmapConverter">
            <summary>
            Defines a conversion from PatternData to a Bitmap, primarily for the
            purpose of converting clipboard contents.
            </summary>
        </member>
        <member name="M:Romulus.Converters.PatternToBitmapConverter.CanConvert(Romulus.Nes.PatternData)">
            <summary>
            Examines the pattern data returns true if
            it can be converted to a Bitmap.
            </summary>
            <param name="data">The data to be converted.</param>
            <returns>True if the data appears to be convertible.</returns>
            <remarks>Any valid pattern data should be convertible.</remarks>
        </member>
        <member name="M:Romulus.Converters.PatternToBitmapConverter.Convert(Romulus.Nes.PatternData)">
            <summary>
            Converts pattern data to a Bitmap.
            </summary>
            <param name="data">The data to convert.</param>
            <returns>A Bitmap with the result.</returns>
        </member>
        <member name="T:Romulus.TransparentStack`1">
            <summary>Provides a stack with transparent access to all items in the stack, indexed by depth.</summary>
            <typeparam name="T">The type of item the stack will store.</typeparam>
        </member>
        <member name="M:Romulus.TransparentStack`1.PopTo(`0)">
            <summary>Pops and returns all items up to and including the specfied item.</summary>
        </member>
        <member name="M:Romulus.TransparentStack`1.PopUntil(`0)">
            <summary>Pops and returns all items up to, but not including, the specfied item.</summary>
        </member>
        <member name="M:Romulus.TransparentStack`1.Crop(`0)">
            <summary>Crops the item deepest in the stack that is equal to the specified gameItem.</summary>
        </member>
        <member name="T:Romulus.Nes.PatternTableRenderer">
            <summary>
            Creates a 128 x 128 pixel, 32-bit bitmap containing a pattern table with a specified
            palette, suitable to present in UI.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTableRenderer.#ctor">
            <summary>
            Creates a new PatternTableRenderer.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTableRenderer.ConstructNameTable">
            <summary>
            Initializes the tile index data for the name table
            to show all tiles.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTableRenderer.Render">
            <summary>
            Renders the patterns to a bitmap that can be accessed
            via the Result property.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTableRenderer.Dispose">
            <summary>
            Releases resources used by this object.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternTableRenderer.Result">
            <summary>Gets the final rendered image.</summary>
        </member>
        <member name="P:Romulus.Nes.PatternTableRenderer.Patterns">
            <summary>
            Gets/sets the pattern table to render.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternTableRenderer.Palette">
            <summary>
            Gets/sets the palette the patterns will be rendered with.
            </summary>
        </member>
        <member name="T:Extension_EventHandler">
            <summary>
            Provides extension methods for EventHandler classes.
            </summary>
        </member>
        <member name="M:Extension_EventHandler.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event.
            </summary>
            <typeparam name="T">The type of event argument.</typeparam>
            <param name="handler">The event handler.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Extension_EventHandler.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises an event.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Extension_EventHandler.Raise(System.EventHandler,System.Object)">
            <summary>
            Rasises an event.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The event sender.</param>
        </member>
        <member name="T:Romulus.EventArgs`1">
            <summary>
            Defines an event args class with a generic parameter.
            </summary>
            <typeparam name="T">The type for the generic parameter.</typeparam>
        </member>
        <member name="M:Romulus.EventArgs`1.#ctor(`0)">
            <summary>
            Creates a new EventArgs object.
            </summary>
            <param name="value">The value associated with an event.</param>
        </member>
        <member name="P:Romulus.EventArgs`1.Value">
            <summary>
            Gets the value associated with this event.
            </summary>
        </member>
        <member name="T:Romulus.Plugin.PluginClipboard">
            <summary>
            Exposes the Windows clipboard as an IPlugInClipboard
            </summary>
        </member>
        <member name="T:Romulus.Plugin.IPluginClipboard">
            <summary>
            Represents a clipboard, with specific capabilites for plug-ins. Plug-ins
            should use an IPluginClipboard instead of System.Windows.Forms.Clipboard.
            </summary>
            <remarks>All write operations should be wrapped between calls to BeginWrite
            and EndWrite. Written data will have no affect until EndWrite is called. For example,
            GetText will not return the value specified by SetText until EndWrite has been
            called.</remarks>
        </member>
        <member name="T:Romulus.Plugin.IPluginConfig">
            <summary>
            Optional interface for a plugin object to provide per-instance settings
            that can be persisted between sessions. This allows the user to close the plug-in
            and resume at a later time where he had left off, not losing any state of
            the plug-in.
            </summary>
            <remarks>This is a general feature to allow a user to resume use of a plug-in at a
            later time. This is generally for the purpose of being able to close a program or
            a project and open it later. For example, in the context of a "project" where multiple
            plugins are simultaneously in use on a single document, the first time a plugin is
            opened for the document it is asked to create it's config object. When the project is
            saved, the plugin is asked to provide the config object to be serialized. Next time
            the project is opened, the plugin is instantiated, and provided the deserialized
            config object from which it can initialize itself.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IPluginConfig.CreateConfig">
            <summary>
            This method is called the first time a plug-in is opened
            for a resumable session.
            </summary>
            <remarks>This method is still called when the plugin isn't
            expected to need to resume. In such cases, the host is expected
            to treat each instance of the plugin as if it is the
            initial instantiation of a resumable session.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IPluginConfig.SaveConfig">
            <summary>
            This method is called when the state of the plugin needs to be saved.
            </summary>
            <returns></returns>
            <remarks><para>The object returned must be serializable. It is permissible
            that the same object be modified and re-returned on successive calles to
            SaveConfig, but the returned object should not be modified any other time.</para>
            <para>When this method is invoked, it does not necessarily
            indicate that the plugin is being terminated. Multiple saves
            can occur during the lifetime of a plugin instance.</para></remarks>
        </member>
        <member name="M:Romulus.Plugin.IPluginConfig.LoadConfig(System.Object)">
            <summary>
            This method is called in place of CreateConfig if a plugin session
            is being resumed. A config object previously created by SaveConfig
            is specified.
            </summary>
            <param name="config">The config object that represents the saved session.</param>
        </member>
        <member name="T:System.Linq.LinqStub">
            <summary>
            Shuts the compiler up.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IEditorHostUI.AddToolbar(System.Windows.Forms.ToolStrip,System.Boolean)">
            <summary>
            Adds a toolbar to the host environment.
            </summary>
            <param name="toolbar">The toolbar to be added.</param>
            <param name="global">Whether the toolbar should be added to a global tool tray. See remarks.</param>
            <remarks>The toolbar will be displayed by the host's UI. The host may not necessarily have a global
            tool tray, in which case the global parameter is ignored. Regardless of whether the toolbar is shown
            in the global tool tray, it is not guarunteed to be shown when a plugin does not have focus. If it is
            shown, it should be disabled when the owning plugin does not have focus. For a toolbar that is always
            accessible, an application-wide plug-in should be used instead of, or in conjunction with, an editor plugin.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorHostUI.SetStatusText(System.String)">
            <summary>
            Sets the status text. This will generally be shown in a status bar.
            </summary>
        </member>
        <member name="T:Romulus.BinaryStreamExtension">
            <summary>
            Provides extensions to the stream class to read
            and write binary data.
            </summary>
        </member>
        <member name="M:Romulus.BinaryStreamExtension.BlockingRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a blocking read on a stream.
            </summary>
            <param name="s">Stream to read from.</param>
            <param name="buffer">Buffer to output to.</param>
            <param name="offset">Where to write into buffer.</param>
            <param name="count">Bytes to read.</param>
            <returns>The number of bytes read. This may be fewer than requested if the end of
            the stream is reached.</returns>
        </member>
        <member name="T:Romulus.Nes.PointerTable">
            <summary>
            References a pointer table in a ROM image.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PointerTable.#ctor(Romulus.Nes.Rom,Romulus.Nes.pHRom)">
            <summary>
            Creates a PointerTable object.
            </summary>
            <param name="rom">The Rom.</param>
            <param name="offset">The offset of the pointer table.</param>
        </member>
        <member name="M:Romulus.Nes.PointerTable.#ctor(Romulus.Nes.Rom,Romulus.Nes.pHRom,System.Int32)">
            <summary>
            Creates a PointerTable object.
            </summary>
            <param name="rom">The Rom.</param>
            <param name="offset">The offset of the pointer table.</param>
            <param name="count">The size of the pointer table. This value is for reference only and is
            not used internally.</param>
        </member>
        <member name="P:Romulus.Nes.PointerTable.Count">
            <summary>
            Gets the specified size of this pointer table. This is for
            reference only. This value is not used internally.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PointerTable.Item(System.Int32)">
            <summary>
            Gets/sets the value of a pointer in the table
            </summary>
            <param name="i">The index of the pointer in the table.</param>
            <returns>A pointer from the table.</returns>
        </member>
        <member name="T:Romulus.Nes.Blitter">
            <summary>
            Specialized drawing class used to render NES screen images.
            </summary>
            <remarks><para>This class is meant to be used for rendering from a pattern table to an
            NES screen image. Both images must be 8-bit. The source image should only use the first
            four colors of the palette.</para>
            <para>This class is designed to be highly optimized and does not perform
            many safety checks. Invalid or out of bounds values as well as incorrect image sizes
            and formats will produce irregular results or likely cause exceptions to be thrown.</para>
            </remarks>
        </member>
        <member name="F:Romulus.Nes.Blitter.DestWidth">
            <summary>
            The expected width of a render target.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.DestHeight">
            <summary>
            The expected height of a render target.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.SourceWidth">
            <summary>
            The expected width of the pattern source image.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.SourceHeight">
            <summary>
            The expected height of the pattern source image.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.ImageFormat">
            <summary>
            The pixel format used by the Blitter.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.outputMaxX">
            <summary>The X coordinate of the right-most pixels in the output image</summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.outputMaxY">
            <summary>The Y coordinate of the bottom-most pixels in the output image</summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.DestBounds">
            <summary>
            The expected bounds of a render target.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Blitter.#ctor">
            <summary>
            Creates a new blitter.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Blitter.CreateCompatibleTargetBitmap">
            <summary>
            Creates a bitmap with the correct dimensions and format for a blitter to render to.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Blitter.IsTargetValid(System.Drawing.Bitmap)">
            <summary>
            Returns a boolean indicating whether the specified Bitmap can be drawn to using a Blitter.
            </summary>
            <param name="target">The Bitmap to test.</param>
            <returns>Boolean indicating whether the specified Bitmap can be drawn to using a Blitter.</returns>
        </member>
        <member name="M:Romulus.Nes.Blitter.IsSourceValid(System.Drawing.Bitmap)">
            <summary>Returns a boolean indicating whethe the specified Bitmap can be used as a pattern source with a Blitter.</summary>
            <param name="source">The Bitmap to test.</param>
            <returns>Boolean indicating whethe the specified Bitmap can be used as a pattern source with a Blitter.</returns>
        </member>
        <member name="M:Romulus.Nes.Blitter.Begin(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Prepares for write-only blitting operations.
            </summary>
            <param name="source">The source image. This should be 2048 pixels wide and eight pixels tall.</param>
            <param name="dest">The destination image. This should be 256 pixels wide and tall.</param>
            <remarks>
            Calling Dispose on the returned object is equivalent to calling the End method. This
            allows a blitting operation's scope to be defined by a using block.
            <code>
            using (blitterObject.Begin(source, target)) {
                 // Blitting operations go here.
                 // No need to call blitterObject.End.
            }
            </code>
            </remarks>
        </member>
        <member name="M:Romulus.Nes.Blitter.Begin(System.Drawing.Bitmap)">
            <summary>
            Prepares for blitting operations that do not involve a source image.
            When the blitter is opened for blitting using this method, the behavior of 
            operations that require a source image are undefined.
            Supports read/write operations.
            </summary>
            <param name="dest">The destination image. This should be 256 pixels wide and tall.</param>
            <remarks>
            Calling Dispose on the returned object is equivalent to calling the End method. This
            allows a blitting operation's scope to be defined by a using block.
            <code>
            using (blitterObject.Begin(target)) {
                 // Blitting operations go here.
                 // No need to call blitterObject.End.
            }
            </code>
            </remarks>
        </member>
        <member name="M:Romulus.Nes.Blitter.End">
            <summary>
            Finalizes the blitting operation
            </summary>
        </member>
        <member name="M:Romulus.Nes.Blitter.ChangeSource(System.Drawing.Bitmap)">
            <summary>
            Selectes a different source for blitting without closing and opening the
            lock on the destination brush.
            </summary>
            <param name="newSource">The new source brush.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawDitherTile(System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Draws a 50% dither of the specified color on a 8x8 tile.
            </summary>
            <param name="tileX">The x-coordinate of a 16x16 tile.</param>
            <param name="tileY">The y-coordinate of a 16x16 tile.</param>
            <param name="color">The count of the color to draw with</param>
            <param name="parity">T value of 0 or 1 to indicate the parity of the dither.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawDitherTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a 50% dither of the specified color on an 8x8 tile.
            </summary>
            <param name="x">The x-coordinate of an 8x8 tile.</param>
            <param name="y">The y-coordinate of an 8x8 tile.</param>
            <param name="color">The count of the color to draw with</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawDither(System.Drawing.Rectangle,System.Byte)">
            <summary>
            Fills a rectangle with a 50% dither.
            </summary>
            <param name="r">The rectangle to fill.</param>
            <param name="color">The color to apply the dither with.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawDither(System.Drawing.Rectangle,System.Byte,System.Int32)">
            <summary>
            Fills a rectangle with a 50% dither.
            </summary>
            <param name="r">The rectangle to fill.</param>
            <param name="color">The color to apply the dither with.</param>
            <param name="parity">The parity, default is zero (even). Odd parity reverses which pixels are filled
            and which are not modified.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.FillTile(System.Int32,System.Int32,System.Byte)">
            <summary>
            Fills an 8x8 tile with solid color
            </summary>
            <param name="x">The x-coordinate of the tile.</param>
            <param name="y">The y-coordinate of the tile.</param>
            <param name="color">The count of the color to fill with.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.FillRect(System.Drawing.Rectangle,System.Byte)">
            <summary>
            Fills the specified rectangle with the specified color.
            </summary>
            <param name="r"></param>
            <param name="color"></param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawRect(System.Drawing.Rectangle,System.Byte)">
            <summary>
            Draws a rectangle to the destination.
            </summary>
            <param name="rect">The bounds of the rectangle.</param>
            <param name="color">The count of the color to use.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.DrawRectHalf(System.Drawing.Rectangle,System.Byte)">
            <summary>
            Draws the top and left lines of a rectangle to the destination (good for grids).
            </summary>
            <param name="rect">The bounds of the rectangle.</param>
            <param name="color">The count of the color to use.</param>
        </member>
        <member name="F:Romulus.Nes.Blitter.StaticClip">
            <summary>
            Defines a constant for the clipping bounds to be used by blitting functions.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Blitter.getSourceClip(System.Drawing.Rectangle)">
            <summary>Returns a rectangle that specifies what region of the source rectangle
            falls within the clip rectangle, relative to the top-left corner of the specified 
            target rectangle.</summary>
            <param name="source">The source rectangle.</param>
            <remarks>The returned rectangle is NOT in destination coordinates. Instead, it is 
            relative to the TARGET rectangle. Positive values for X or Y indicate that clipping
            will occur on the left or top edges, respectively.</remarks>
            <returns>A rectangle structure that indicates what clipping will occur. SEE REMARKS.</returns>
        </member>
        <member name="M:Romulus.Nes.Blitter.getSourceClip(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Returns a rectangle that specifies what region of the source rectangle
            falls within the clip rectangle, relative to the top-left corner of the specified 
            target rectangle.</summary>
            <param name="target">The target rectangle, in destination coordinates.</param>
            <param name="clip">The clip rectangle, in destination coordinates.</param>
            <remarks>The returned rectangle is NOT in destination coordinates. Instead, it is 
            relative to the TARGET rectangle. Positive values for X or Y indicate that clipping
            will occur on the left or top edges, respectively.</remarks>
            <returns>A rectangle structure that indicates what clipping will occur. SEE REMARKS.</returns>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTile(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a tile to the destination.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destTileX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destTileY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Draws a tile to the destination.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destTileX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destTileY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Performs a bit-block-transfer from the source brush to 
            the destination brush, applying the specified paletteIndex.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destTileX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destTileY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="transparentColor">The color to use for transparent. This is typically zero. Specify a negative
            value for no transparency.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte,Romulus.Nes.Blitter.FlipFlags,System.Int32)">
            <summary>
            Performs a bit-block-transfer from the source brush to 
            the destination brush, applying the specified paletteIndex.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="flip">T FlipFlags value indicating how to flip the tile.</param>
            <param name="transparentColor">The color to use as transparent.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTileTransparent(System.Int32,System.Int32,System.Int32,System.Byte,Romulus.Nes.Blitter.FlipFlags)">
            <summary>
            Performs a bit-block-transfer from the source brush to 
            the destination brush, applying the specified paletteIndex.
            Any pixels with a value of zero will be rendered transparently.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destX">The x-coordinate of the tile to be drawn to in the destination</param>
            <param name="destY">The y-coordinate of the tile to be drawn to in the destination</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="flip">T FlipFlags value indicating how to flip the tile.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTransparent(System.Int32,System.Int32,System.Int32,System.Byte,Romulus.Nes.Blitter.FlipFlags)">
            <summary>
            Performs a bit-block-transfer from the source brush to 
            the destination brush, applying the specified paletteIndex.
            Any pixels with a value of zero will be rendered transparently.
            This overload specifies a pixel location instead of a tile location.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destX">The x-coordinate to draw to.</param>
            <param name="destY">The y-coordinate to draw to.</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="flip">T FlipFlags value indicating how to flip the tile.</param>
        </member>
        <member name="M:Romulus.Nes.Blitter.BlitTransparent(System.Int32,System.Int32,System.Int32,System.Byte,Romulus.Nes.Blitter.FlipFlags,System.Int32)">
            <summary>
            Performs a bit-block-transfer from the source brush to 
            the destination brush, applying the specified paletteIndex.
            Any pixels with a value of zero will be rendered transparently.
            This overload specifies a pixel location instead of a tile location.
            </summary>
            <param name="tile">The count of the tile to be used from the source brush</param>
            <param name="destX">The x-coordinate to draw to.</param>
            <param name="destY">The y-coordinate to draw to.</param>
            <param name="pal">The paletteIndex to use.</param>
            <remarks>The paletteIndex specified will work for the range 0 through 31 if the source
            brush is formatted correctly, but for NES screen rendering typically only the first four
            palettes will be used.</remarks>
            <param name="transparentColor">The color to render as transparent. Zero by default.</param>
            <param name="flip">T FlipFlags value indicating how to flip the tile.</param>
        </member>
        <member name="T:Romulus.Nes.Blitter.FlipFlags">
            <summary>
            Specifies flipping to be used when blitting a tile.
            </summary>
            <remarks>These values can be combined.</remarks>
        </member>
        <member name="F:Romulus.Nes.Blitter.FlipFlags.None">
            <summary>Specifies no flipping.</summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.FlipFlags.Horizontal">
            <summary>Specifies horizontal flipping.</summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.FlipFlags.Vertical">
            <summary>Specifies vertical flipping.</summary>
        </member>
        <member name="F:Romulus.Nes.Blitter.FlipFlags.HorizontalVertial">
            <summary>Specifies both horizontal and vertical flipping.</summary>
        </member>
        <member name="T:Romulus.Nes.Blitter.BlitOperationScope">
            <summary>
            Defines an object that can be used with a 'using' statement to encapsulate the scope of a blit operation.
            </summary>
            <remarks>
            This class should never be used directly. It is an implementation detail that allows a blitting
            operation to be wrapped in a using statement, i.e. [using(someBlitter.Begin(target) { /* blit operations */ }].
            </remarks>
        </member>
        <member name="T:Romulus.Nes.IScreenViewHost">
            <summary>
            This interface should implemented for any control that will contain a ScreenView.
            Any IScreenViewHost object MUST be a control.
            </summary>
        </member>
        <member name="T:Romulus.Nes.pCpu">
            <summary>
            Represents a 16-bit CPU pointer.
            </summary>
        </member>
        <member name="F:Romulus.Nes.pCpu.NullPointer">
            <summary>
            Defines the value used to specify a null pointer.
            </summary>
        </member>
        <member name="M:Romulus.Nes.pCpu.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a pCpu pointer from the specified bytes.
            </summary>
            <param name="low">The low byte.</param>
            <param name="high">The high byte.</param>
        </member>
        <member name="M:Romulus.Nes.pCpu.#ctor(System.Byte[],System.Int32)">
            <summary>
            Loads a pointer from the specified buffer, low byte first.
            </summary>
        </member>
        <member name="M:Romulus.Nes.pCpu.#ctor(System.UInt16)">
            <summary>Creates a new pCpu object with the specified address.</summary>
            <param name="address">The address this pointer will represent.</param>
        </member>
        <member name="M:Romulus.Nes.pCpu.#ctor(System.Int32)">
            <summary>Creates a new pCpu object with the specified address.</summary>
            <param name="address">The address this pointer will represent. If the value is beyond
            the valid 16-bit range, it will be truncated.</param>
        </member>
        <member name="M:Romulus.Nes.pCpu.Write(System.Byte[],System.Int32)">
            <summary>
            Copies this pointer to the specified buffer.
            </summary>
            <param name="data">Buffer to copy the pointer to.</param>
            <param name="offset">Location within the buffer to copy the pointer to.</param>
        </member>
        <member name="M:Romulus.Nes.pCpu.ToRomPointer(Romulus.Nes.Bank16)">
            <summary>
            Converts the CPU pointer to a ROM offset.
            </summary>
            <param name="RamBank">The 16k bank the pointer references.</param>
            <returns>A rom offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.ToHRomPointer(Romulus.Nes.Bank16)">
            <summary>
            Converts the CPU pointer to a ROM offset.
            </summary>
            <param name="RamBank">The 16k bank the pointer references.</param>
            <returns>A rom offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.ToRomPointer(Romulus.Nes.Bank32)">
            <summary>
            Converts the CPU pointer to a ROM offset.
            </summary>
            <param name="RamBank">The 32k bank the pointer references.</param>
            <returns>A rom offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.ToHRomPointer(Romulus.Nes.Bank32)">
            <summary>
            Converts the CPU pointer to a ROM offset.
            </summary>
            <param name="RamBank">The 32k bank the pointer references.</param>
            <returns>A rom offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.ToString">
            <summary>
            Gets the offset as a string.
            </summary>
            <returns>The offset as a string.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Addition(Romulus.Nes.pCpu,System.Int32)">
            <summary>
            Defines the + operator between a pointer and an
            integer.
            </summary>
            <param name="ptr">The pointer to add.</param>
            <param name="offset">The integer to add.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Subtraction(Romulus.Nes.pCpu,System.Int32)">
            <summary>
            Defines the - operator between a pointer and an
            integer.
            </summary>
            <param name="ptr">The pointer to subtract.</param>
            <param name="offset">The integer to subtract.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Equality(Romulus.Nes.pCpu,Romulus.Nes.pCpu)">
            <summary>
            Defines the equality operator between two pCpu objects.
            </summary>
            <param name="a">The object to compare.</param>
            <param name="b">The object to compare.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Inequality(Romulus.Nes.pCpu,Romulus.Nes.pCpu)">
            <summary>
            Defines the inequality operator between two pCpu objects.
            </summary>
            <param name="a">The object to compare.</param>
            <param name="b">The object to compare.</param>
            <returns>A boolean indicating inequality.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Explicit(Romulus.Nes.pCpu)~System.Int32">
            <summary>
            Defines a conversion from a pCpu to an int.
            </summary>
            <param name="a">The pCpu to convert.</param>
            <returns>The integer equivalent of the pCpu obect.</returns>
        </member>
        <member name="M:Romulus.Nes.pCpu.op_Explicit(System.Int32)~Romulus.Nes.pCpu">
            <summary>
            Defines a conversion from a int to an pCpu.
            </summary>
            <param name="a">The int to convert.</param>
            <returns>The pCpu equivalent of the int value.</returns>
        </member>
        <member name="P:Romulus.Nes.pCpu.Address">
            <summary>
            Gets/sets the address of the pointer.
            </summary>
        </member>
        <member name="P:Romulus.Nes.pCpu.Low">
            <summary>
            Gets/sets the low byte of this pointer.
            </summary>
        </member>
        <member name="P:Romulus.Nes.pCpu.High">
            <summary>
            Gets/sets the high byte of this pointer.
            </summary>
        </member>
        <member name="P:Romulus.Nes.pCpu.IsRomAddress">
            <summary>
            Returns whether the address is within ROM address space
            ($8000-$FFFF).
            </summary>
        </member>
        <member name="T:Romulus.Nes.pUhRom">
            <summary>
            Represents on offset within an unheadered ROM.
            </summary>
        </member>
        <member name="M:Romulus.Nes.pUhRom.#ctor(System.Int32)">
            <summary>
            Creates a pUhRom with the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Romulus.Nes.pUhRom.ToString">
            <summary>
            Gets this offset in a string format.
            </summary>
            <returns>This offset in a string format.</returns>
        </member>
        <member name="M:Romulus.Nes.pUhRom.op_Explicit(System.Int32)~Romulus.Nes.pUhRom">
            <summary>
            Provides an explicit conversion from an int to a pUhRom.
            </summary>
            <param name="i">The value to convert.</param>
            <returns>The value as a pUhRom.</returns>
        </member>
        <member name="M:Romulus.Nes.pUhRom.op_Explicit(Romulus.Nes.pUhRom)~System.Int32">
            <summary>
            Provides an explicit conversion from a pUhRom to an int.
            </summary>
            <param name="i">The offset to convert.</param>
            <returns>The offset as an integer.</returns>
        </member>
        <member name="M:Romulus.Nes.pUhRom.op_Addition(Romulus.Nes.pUhRom,System.Int32)">
            <summary>
            Defines the + operator between a pointer and an int
            to allow for pointer math.
            </summary>
            <param name="ptr">The pointer to modify.</param>
            <param name="offset">The amount to offset the pointer.</param>
            <returns>The modified pointer.</returns>
        </member>
        <member name="M:Romulus.Nes.pUhRom.op_Subtraction(Romulus.Nes.pUhRom,System.Int32)">
            <summary>
            Defines the - operator between a pointer and an int
            to allow for pointer math.
            </summary>
            <param name="ptr">The pointer to modify.</param>
            <param name="offset">The amount to offset the pointer.</param>
            <returns>The modified pointer.</returns>
        </member>
        <member name="P:Romulus.Nes.pUhRom.Offset">
            <summary>
            Gets the value of this pUhRom.
            </summary>
        </member>
        <member name="P:Romulus.Nes.pUhRom.Headered">
            <summary>
            Gets this offset adjusted for the size of a header.
            </summary>
        </member>
        <member name="T:Romulus.Nes.pHRom">
            <summary>
            Represents an offset within a headered rom.
            </summary>
        </member>
        <member name="F:Romulus.Nes.pHRom.HeaderSize">
            <summary>
            Defines the size of a standard iNES header.
            </summary>
        </member>
        <member name="F:Romulus.Nes.pHRom.Invalid">
            <summary>
            Gets an object indicating an invalid offset.
            </summary>
        </member>
        <member name="M:Romulus.Nes.pHRom.#ctor(System.Int32)">
            <summary>
            Creates a pHRom with the specified offset.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Explicit(Romulus.Nes.pHRom)~Romulus.Nes.pUhRom">
            <summary>
            Defines a coversion from an unheadered offset
            to a headered offset. The conversion adjusts for the
            header.
            </summary>
            <param name="ptr">The headered offset.</param>
            <returns>The unheadered offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Explicit(Romulus.Nes.pUhRom)~Romulus.Nes.pHRom">
            <summary>
            Defines a coversion from a headered offset
            to an unheadered offset. The conversion adjusts for the
            header.
            </summary>
            <param name="ptr">The unheadered offset.</param>
            <returns>The headered offset.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Explicit(System.Int32)~Romulus.Nes.pHRom">
            <summary>
            Provides an explicit conversion from an int to a pHRom.
            </summary>
            <param name="i">The value to convert.</param>
            <returns>The value as a pHRom.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Explicit(Romulus.Nes.pHRom)~System.Int32">
            <summary>
            Provides an explicit conversion from a pHRom to an int.
            </summary>
            <param name="i">The value to convert.</param>
            <returns>The value as an int.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Addition(Romulus.Nes.pHRom,System.Int32)">
            <summary>
            Defines the + operator between a pointer and an int
            to allow for pointer math.
            </summary>
            <param name="ptr">The pointer to modify.</param>
            <param name="offset">The amount to offset the pointer.</param>
            <returns>The modified pointer.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Subtraction(Romulus.Nes.pHRom,System.Int32)">
            <summary>
            Defines the - operator between a pointer and an int
            to allow for pointer math.
            </summary>
            <param name="ptr">The pointer to modify.</param>
            <param name="offset">The amount to offset the pointer.</param>
            <returns>The modified pointer.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Equality(Romulus.Nes.pHRom,Romulus.Nes.pHRom)">
            <summary>
            Defines the equality operator between two pHRom objects.
            </summary>
            <param name="a">The object to compare.</param>
            <param name="b">The object to compare.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.op_Inequality(Romulus.Nes.pHRom,Romulus.Nes.pHRom)">
            <summary>
            Defines the inequality operator between two pHRom objects.
            </summary>
            <param name="a">The object to compare.</param>
            <param name="b">The object to compare.</param>
            <returns>A boolean indicating inequality.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.GetHashCode">
            <summary>
            Implementaion detail.
            </summary>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Romulus.Nes.pHRom.ToString">
            <summary>
            Gets the pointer as a string.
            </summary>
            <returns>A zebra.</returns>
        </member>
        <member name="P:Romulus.Nes.pHRom.IsInvalid">
            <summary>
            Returns true if this object represents a special 'invalid' value.
            This is equivalant to comparing this pointer to pHRom.Invalid
            using the equality operator.
            </summary>
        </member>
        <member name="P:Romulus.Nes.pHRom.Offset">
            <summary>
            Gets the value of this pHRom.
            </summary>
        </member>
        <member name="T:Romulus.Nes.Bank16">
            <summary>
            Identifies the offset of 16k banks.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x0000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x4000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x8000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.xC000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x10000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x14000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x18000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x1C000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank16.x20000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="T:Romulus.Nes.Bank32">
            <summary>
            Identifies the offset of 32k banks.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Bank32.x0000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank32.x8000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank32.x10000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank32.x18000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="F:Romulus.Nes.Bank32.x20000">
            <summary>Specifies a bank offset.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Needed to enable extension methods for the DotNet framework 2.0.
            </summary>
        </member>
        <member name="T:Romulus.Plugin.ConfigLoadException">
            <summary>
            Occurs when an IPluginConfig plugin fails to initialize from a config object.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.ConfigLoadException.#ctor(System.String)">
            <summary>
            Creates a DataConversionException.
            </summary>
            <param name="message">The message that describes this error.</param>
        </member>
        <member name="M:Romulus.Plugin.ConfigLoadException.#ctor">
            <summary>
            Creates a DataConversionException.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.ConfigLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a DataConversionException.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="inner">The exception that resulted in this exception.</param>
        </member>
        <member name="M:Romulus.Plugin.ConfigLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes exception.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:Romulus.Plugin.ClipboardConverterAttribute">
            <summary>
            Demarks a class as a clipboard data converter. Clipboard data converters
            should implement IDataTypeConverter.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.ClipboardConverterAttribute.#ctor(System.Type,System.Type)">
            <summary>Defines a ClipboardConverter attribute.</summary>
            <param name="fromType">The type the converter converts from.</param>
            <param name="toType">To type the converter converts to.</param>
            <remarks>This constructor defaults to Defer for applicability,
            and allows inherited types.</remarks>
        </member>
        <member name="M:Romulus.Plugin.ClipboardConverterAttribute.#ctor(System.Type,System.Type,Romulus.Plugin.ConverterTypeDerivation)">
            <summary>Defines a ClipboardConverter attribute.</summary>
            <param name="fromType">The type the converter converts from.</param>
            <param name="toType">To type the converter converts to.</param>
            <param name="inheritance">How inheritance in handled for the from- and to-type.</param>
            <remarks>This constructor defaults to Defer for applicability.</remarks>
        </member>
        <member name="M:Romulus.Plugin.ClipboardConverterAttribute.#ctor(System.Type,Romulus.Plugin.ConverterTypeDerivation,System.Type,Romulus.Plugin.ConverterTypeDerivation,Romulus.Plugin.ClipboardConverterApplicability)">
            <summary>Defines a ClipboardConverter attribute.</summary>
            <param name="fromType">The type the converter converts from.</param>
            <param name="fromInheritance">How inheritance is handled for the from-type.</param>
            <param name="toType">To type the converter converts to.</param>
            <param name="toInheritance">How inheritance in handled for the to-type.</param>
            <param name="application">How this converter is applied to the clipboard.</param>
        </member>
        <member name="M:Romulus.Plugin.ClipboardConverterAttribute.#ctor(System.Type,System.Type,Romulus.Plugin.ClipboardConverterApplicability)">
            <summary>Defines a ClipboardConverter attribute.</summary>
            <param name="fromType">The type the converter converts from.</param>
            <param name="toType">To type the converter converts to.</param>
            <param name="application">How this converter is applied to the clipboard.</param>
            <remarks>This overload accepts derived types for conversion.</remarks>
        </member>
        <member name="P:Romulus.Plugin.ClipboardConverterAttribute.Applicability">
            <summary>
            Defines how a converter will be applied.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.ClipboardConverterAttribute.FromInheritance">
            <summary>
            Defines how the converter handles inheritance.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.ClipboardConverterAttribute.FromType">
            <summary>
            Defines the type the converter will convert.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.ClipboardConverterAttribute.ToInheritance">
            <summary>
            Defines how the converter handles inheritance.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.ClipboardConverterAttribute.ToType">
            <summary>
            Defines the type the converter will convert to.
            </summary>
        </member>
        <member name="T:Romulus.Plugin.ClipboardConverterApplicability">
            <summary>
            Specifies how a converter should be considered for
            eligibility to be applied as a clipboard converter.
            </summary>
        </member>
        <member name="F:Romulus.Plugin.ClipboardConverterApplicability.Standard">
            <summary>
            Indicates that a data converter is a standard converter for a data type
            and should always be used.
            </summary>
            <remarks>There should be only one standard converter for any conversion,
            which should be defined in the same assembly as one of the types to be converted.
            The host may ignore converters not defined in the same assembly as one of the
            types to be converted. If there are multiple acceptable standard converters,
            the hast may opt to use any one, arbitrarily, or none at all, or to produce an error.</remarks>
        </member>
        <member name="F:Romulus.Plugin.ClipboardConverterApplicability.Configurable">
            <summary>
            Indicates that a user may opt to use a data converter for a data type
            via the host's configuration.
            </summary>
            <remarks>The method of configuring/selecting converters is left up to the host.</remarks>
        </member>
        <member name="F:Romulus.Plugin.ClipboardConverterApplicability.Defer">
            <summary>
            Indicates that a data converter will be used for a data type unless
            there is a standard converter (in which case it defers to the standard converter).
            </summary>
            <remarks>If there are multiple converters marked as "Defer", the host
            may select any one arbitrarily, or none at all, but should not produce an
            error.</remarks>
        </member>
        <member name="T:Romulus.Plugin.ConverterTypeDerivation">
            <summary>
            Specifies how a converter will consider types with regard to
            inheritance.
            </summary>
        </member>
        <member name="F:Romulus.Plugin.ConverterTypeDerivation.ExactMatch">
            <summary>
            Indicates that the type to be converted must exactly match that specified by the converter.
            If the type is an interface, objects that implement a derived interface will not be excluded.
            </summary>
        </member>
        <member name="F:Romulus.Plugin.ConverterTypeDerivation.Assignable">
            <summary>
            Indicates that the type to be converted may be the type specified by the converter or a derived
            type (i.e. it is assignable).
            </summary>
        </member>
        <member name="M:Romulus.HexEdit.SetCursorPosition(System.Int32)">
            <summary>
            Moves the cursor and ensures it is visible.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Romulus.HexEdit.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor and ensures it is visible.
            </summary>
            <param name="offset"></param>
            <param name="endOffset"></param>
        </member>
        <member name="M:Romulus.HexEdit.DrawLineRelative(System.Drawing.Graphics,System.Drawing.Brush,System.Int32)">
            <summary>Draws a line of text (text only, background should be drawn first).
            Selected text or text over the cursor will be drawn with the highlight color</summary>
        </member>
        <member name="M:Romulus.HexEdit.ProcessKeyPress(System.Char)">
            <summary>
            Processes keypresses for data entry. Override this method to filter this behavior, or invoke
            this method to simulate key presses.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Romulus.HexEdit.HexEditLayout.PerformLayout(System.Drawing.Graphics)">
            <summary>
            To be called before each painting of the HexEdit control to perform any necessary calculation
            and initialization.
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="F:Romulus.HexEdit.HexLineInfo.SelStart">
            <summary>
            Range of selected characters in this line. If there is no selection, selStart and selEnd will have a value of -1.
            </summary>
        </member>
        <member name="F:Romulus.HexEdit.HexLineInfo.SelEnd">
            <summary>
            Inclusive end of selected characters, or -1 if no characters are selected.
            </summary>
        </member>
        <member name="T:Romulus.Nes.SpriteDef">
            <summary>
            Defines a set of tile sprites to be combined into a larger composite sprite.
            </summary>
        </member>
        <member name="F:Romulus.Nes.SpriteDef.data">
            <summary>
            List of comprising tiles.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.#ctor">
            <summary>
            Creates an empty sprite.
            </summary>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.#ctor(Romulus.Nes.SpriteTile[])">
            <summary>
            Creates a SpriteDef from the specified tile data.
            </summary>
            <param name="data">An array of tile data.</param>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.FromSquareLayout(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creates a SpriteDef with tiles arranged in a grid.
            </summary>
            <param name="width">The width of the sprite (in tiles).</param>
            <param name="pal">The index of the palette to use.</param>
            <param name="tiles">The list of tile indecies to use.</param>
            <returns>A new SpriteDef</returns>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.FromSquareLayoutAligned(System.Int32,System.Int32,Romulus.Nes.SpriteAlign,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a SpriteDef with tiles arranged in a grid, aligned on a specified edge.
            </summary>
            <param name="width">The width of the sprite (in tiles).</param>
            <param name="pal">The index of the palette to use.</param>
            <param name="tiles">The list of tile indecies to use.</param>
            <param name="align">The edge to align tiles on.</param>
            <param name="offsetX">An amount to offset the location of each tile.</param>
            <param name="offsetY">An amount to offset the location of each tile.</param>
            <returns>A new SpriteDef.</returns>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.FromSquareLayoutAligned(System.Int32,System.Int32,Romulus.Nes.SpriteAlign,System.Byte[])">
            <summary>
            Creates a SpriteDef with tiles arranged in a grid, aligned on a specified edge.
            </summary>
            <param name="width">The width of the sprite (in tiles).</param>
            <param name="pal">The index of the palette to use.</param>
            <param name="tiles">The list of tile indecies to use.</param>
            <param name="align">The edge to align tiles on.</param>
            <returns>A new SpriteDef.</returns>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.GetEnumerator">
            <summary>
            Gets a SpriteTile enumerator.
            </summary>
            <returns>A SpriteTile enumerator.</returns>
        </member>
        <member name="M:Romulus.Nes.SpriteDef.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.
            </summary>
            <returns>An Enumerator.</returns>
        </member>
        <member name="P:Romulus.Nes.SpriteDef.Data">
            <summary>
            Gets the defining tile data.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SpriteDef.Count">
            <summary>
            Gets the number of sprite tiles in this sprite def.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SpriteDef.Item(System.Int32)">
            <summary>
            Gets or sets a SpriteTile in this SpriteDef.
            </summary>
            <param name="index">Index of a SpriteTile.</param>
            <returns>A SpriteTile from this SpriteDef.</returns>
        </member>
        <member name="T:Romulus.Nes.SpriteAlign">
            <summary>
            Specifies alignment for a sprite definition.
            </summary>
        </member>
        <member name="F:Romulus.Nes.SpriteAlign.Top">
            <summary>
            Indicates sprites aligned at the top edge.
            </summary>
        </member>
        <member name="F:Romulus.Nes.SpriteAlign.Bottom">
            <summary>
            Indicates sprites aligned at the bottom edge.
            </summary>
        </member>
        <member name="T:Romulus.Nes.NesPalette">
            <summary>
            Lists the colors that the NES can display.
            </summary>
        </member>
        <member name="F:Romulus.Nes.NesPalette.black">
            <summary>This field is used in the initialization of NesColors to improve readability.</summary>
        </member>
        <member name="F:Romulus.Nes.NesPalette.NesColors">
            <summary>
            This is full the color palette used for rendering NES graphics.
            Although this is a 256-color palette, only tThe first sixty-four 
            colors are used.
            </summary>
        </member>
        <member name="T:Romulus.Nes.Mappers.Mmc1">
            <summary>
            Resolves addresses in the ROM address space in a manner similar to 
            Nintendo's MMC1 controller.
            </summary>
            <remarks><para>Like the NES MMC1 controller, this class resolves addresses
            between 0x8000 and 0xFFFF to the offset of banked ROM data. The behavior
            varies depending on the configuration of the Mmc1Controller
            used to create the Mmc1 object.</para>
            <para>Each Mmc1 object maps a single bank. To access multiple banks,
            multiple Mmc1 objects will be needed.</para></remarks>
            <seealso cref="T:Romulus.Nes.Mappers.Mmc1Controller"/>
            <seealso cref="T:Romulus.Nes.Mappers.NoMapper"/>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1.resolveFunction">
            <summary>Stores reference to the function that will resolve pointers. A different funtion will be used depending on mapper configuration.</summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1.fixedBankOffset">
            <summary>Offset of the fixed bank, if there is one.</summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1.bankOffset">
            <summary>Offset of the swappable bank.</summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.#ctor(Romulus.Nes.Mappers.Mmc1Controller,System.Int32)">
            <summary>
            Creates a new Mmc1 mapper.
            </summary>
            <param name="owner">The Mmc1Controller this mapper is for.</param>
            <param name="bankIndex">The bank this mapper maps.</param>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.resolve32kBank8000(Romulus.Nes.pCpu)">
            <summary>This function will resolve pointers between 0x8000 and 0xFFFF
            to addresses starting at the specified (32k) bank offset.</summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.resolve16kBank8000(Romulus.Nes.pCpu)">
            <summary>This function will resolve pointers between 0x8000 and 0xBFFF
            to addresses starting at the specified (16k) bank offset. Addresses
            between 0xC000 and 0xFFFF will resolve to the last bank.</summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.resolve16kBankC000(Romulus.Nes.pCpu)">
            <summary>This function will resolve pointers between 0xC000 and 0xFFFF
            to addresses starting at the specified (16k) bank offset. Addresses
            between 0x8000 and 0xBFFF will resolve to the first bank.</summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.resolveAddress(Romulus.Nes.pCpu)">
            <summary>
            Implements Mmc1 mapping.
            </summary>
            <param name="pointer">The address to resolve.</param>
            <returns>The unheadered offset the address maps to.</returns>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1.getAddress(System.Int32)">
            <summary>
            Implements reverse-mapping for Mmc1.
            </summary>
            <param name="offset">The offset to get an address for.</param>
            <returns>The address that the offset is mapped to.</returns>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1.BankOffset">
            <summary>
            Gets the offset of the ROM bank this mapper is mapped to.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1.BankIndex">
            <summary>
            Gets the index of the ROM bank this mapper is mapped to.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1.Owner">
            <summary>
            Gets the Mmc1Controller this Mmc1 mapper object belongs to.
            </summary>
        </member>
        <member name="T:Romulus.Nes.Mappers.Mmc1Controller">
            <summary>
            Simulates behavior of the Mmc1 mapper hardware. Provides Mmc1 mapper objects to
            access ROM data via pointers.
            </summary>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1Controller.#ctor(Romulus.Nes.Rom,Romulus.Nes.Mappers.Mmc1Controller.BankSizes,Romulus.Nes.Mappers.Mmc1Controller.Banks)">
            <summary>
            Creates an Mmc1Controller object.
            </summary>
            <param name="rom">The Rom to use the mapper for.</param>
            <param name="bankSize">The size of the swappable banks.</param>
            <param name="hotBank">When using 16k banks, specifies which bank is swappable.
            Ignored with 32k banks.</param>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1Controller.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates an Mmc1Controller object with default 16k swappable bank at 0x8000.
            </summary>
            <param name="rom">The ROM to use the mapper for.</param>
        </member>
        <member name="M:Romulus.Nes.Mappers.Mmc1Controller.GetMapper">
            <summary>
            Returns an Mmc1 mapper object to the first bank.
            </summary>
            <returns>An Mmc1 mapper object to the first bank.</returns>
            <remarks>The mapper object returned can only be used for the first bank. Use the indexer
            instead (array syntax), and specify the bank to access.
            <code>
            var controller = SomeRom.Mappers;
            Mmc1 mapperForBank2 = controller[2];
            </code>
            </remarks>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1Controller.BankSize">
            <summary>
            Gets the size of the swappable bank.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1Controller.HotBank">
            <summary>
            Gets which bank is swappable. If using 32k banks, this value is not used.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1Controller.FixedBankOffset">
            <summary>
            Gets the offset of the bank that is not swappable. If using 32k banks, this value is not used.
            </summary>
            <remarks>If the bank at 0x8000 is fixed, it points to the first PRG bank. If the bank at 0xC000
            is fixed, it points to the last PRG bank.</remarks>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1Controller.FixedBankIndex">
            <summary>
            Gets the index of the ROM bank that can not be swapped.
            </summary>
        </member>
        <member name="P:Romulus.Nes.Mappers.Mmc1Controller.Item(System.Int32)">
            <summary>
            Returns a mapper to the specified bank.
            </summary>
            <param name="bank">The bank to get a mapper for.</param>
            <returns>A mapper to the specified bank.</returns>
        </member>
        <member name="T:Romulus.Nes.Mappers.Mmc1Controller.BankSizes">
            <summary>
            Gets the bank sizes that can be used.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1Controller.BankSizes.Size16">
            <summary>
            Indicates Bankswapping with 16k banks.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1Controller.BankSizes.Size32">
            <summary>
            Indicates Bankswapping with 32k banks.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1Controller.BankSizes.Size32Truncated">
            <summary>
            Indicates Bankswapping with 32k banks where, when a bank
            index is specified, the least significant bit is ignored.
            </summary>
        </member>
        <member name="T:Romulus.Nes.Mappers.Mmc1Controller.Banks">
            <summary>
            Specifies a swappable bank.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1Controller.Banks.x8000">
            <summary>
            Specifies the address space from 0x8000 to 0xBFFF.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mappers.Mmc1Controller.Banks.xC000">
            <summary>
            Specifies the address space from 0xC000 to 0xFFFF.
            </summary>
        </member>
        <member name="T:ArrayExt">
            <summary>
            Provides extension methods for arrays.
            </summary>
        </member>
        <member name="M:ArrayExt.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get the array slice between the two indexes.
            Inclusive for start index, exclusive for end index.
            </summary>
        </member>
        <member name="M:ArrayExt.Clone``1(``0[])">
            <summary>
            Clones an array.
            </summary>
            <typeparam name="T">The array type to be cloned.</typeparam>
            <param name="source">The original array.</param>
            <returns>A new array with the same contents as the original.</returns>
        </member>
        <member name="T:Romulus.Plugin.IEditorPlugin">
            <summary>
            Represents a plugin for a ROM editor.
            </summary>
            <remarks>The actual UI component class should not implement this interface.
            Instead, a separate class should be created to describe the editor component.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorPlugin.GetInterface">
            <summary>
            Gets the actual interface component. The returned object should support the IEditorComponent interface.
            Performing a type check to confirm this is recommended.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Romulus.Plugin.IEditorComponent">
            <summary>
            Represents a rom-editing component.
            </summary>
            <remarks>When an IEditorComponent is created, the following methods should be called in the
            given order: Constructor, CreateConfig or LoadConfig (if applicable), LoadRom, Initalize.
            These methods should all be colled before before the component is shown.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.LoadRomFrom(Romulus.Plugin.RomDocument)">
            <summary>
            Loads the ROM from the specified document. Unless the UI component
            is read-only, it should create its own internal Rom object.
            </summary>
            <param name="romDoc"></param>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.SetHost(Romulus.Plugin.IEditorHost)">
            <summary>
            Called after a component is created to specify the host.
            </summary>
            <param name="host">The plug-in host.</param>
            <remarks>This method should be called after the component is created but before it is
            shown. Generally, the host should be fully initialized when this method is called.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.Initialize">
            <summary>
            This method is to be called after SetHost and LoadRomFrom, immediately before the 
            UI is shown.
            </summary>
            <remarks>It is recommended that any toolbars be added in this method.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.CommitChanges">
            <summary>
            Instructs the component to write any pending changes to ROM data. For
            example, this would called when switching between plug-ins to ensure
            the data for all other plug-ins are syncronized with this plug-in.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.BeforeExternalUpdate">
            <summary>
            Called before this component's ROM image is updated to reflect changes made by other
            plug-ins.
            </summary>
            <remarks>When changes are made by a plug-in, the host, when appropriate, will
            notify other components of changes by doing the following in the specified order: call
            BeforeExternalUpdate, update data in the ROM image specified by the Rom property,
            then call NotifyExternalChange.</remarks>
        </member>
        <member name="M:Romulus.Plugin.IEditorComponent.NotifyExternalChanges">
            <summary>
            Called to notify this component that changes have been made to its
            ROM image to reflect changes made by another plug-in.
            </summary>
            <remarks>When changes are made by a plug-in, the host, when appropriate, will
            notify other components of changes by doing the following in the specified order: call
            BeforeExternalUpdate, update data in the ROM image specified by the Rom property,
            then call NotifyExternalChange.</remarks>
        </member>
        <member name="P:Romulus.Plugin.IEditorComponent.Rom">
            <summary>Gets the ROM the UI compontent edits.</summary>
        </member>
        <member name="T:Romulus.Plugin.IEditorHost">
            <summary>
            Represents a plug-in host.
            </summary>
        </member>
        <member name="P:Romulus.Plugin.IEditorHost.UI">
            <summary>
            Gets the interface used to present toolbars through the plug-in host.
            </summary>
        </member>
        <member name="E:Romulus.Plugin.IEditorHost.ClipboardChanged">
            <summary>
            Raised when the contents of the clipboard change.
            </summary>
            <remarks>Note to implementors: when a plug-in is closed,
            it is important to make sure the plug-in detaches any event handlers.
            If the plug-in does not unregister its handlers, and the host does
            not rectify this, a reference to the plug-in object will be maintained
            on the invocation list, preventing the plug-in from being garbage collected.</remarks>
        </member>
        <member name="T:ExceptionExtension">
            <summary>
            Provides extension methods for exceptions.
            </summary>
        </member>
        <member name="F:ExceptionExtension.RomulusDataTag">
            <summary>
            Defines a string to identify romulus exception data.
            </summary>
        </member>
        <member name="M:ExceptionExtension.Tag``1(``0,Romulus.RomulusError)">
            <summary>
            Tags an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex"></param>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:ExceptionExtension.GetErrorCode(System.Exception)">
            <summary>
            Gets a tag from an exception.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Romulus.RomulusError">
            <summary>
            Represents the consequences or nature of an exception (in addition to
            the exceptions normal data, which only identifies the immediate cause of the error).
            </summary>
        </member>
        <member name="F:Romulus.RomulusError.Unspecified">
            <summary>No error code has been specified.</summary>
        </member>
        <member name="F:Romulus.RomulusError.ErrorOpeningRom">
            <summary>A rom could not be opened.</summary>
        </member>
        <member name="F:Romulus.RomulusError.RomTooSmall">
            <summary>A rom could not be opened because a stream, file, or specified data size was too small.</summary>
        </member>
        <member name="T:Romulus.Nes.ScreenControl">
            <summary>
            Presents a single screen for display or editing.
            </summary>
            <remarks>This screen drawing login can be implemented in one of two ways.
            Either this class' members can be overridden to implement behavior, or it
            can simply host a custom ScreenView that implements the behavior. The
            latter is more flexible as the same ScreenView can then be used in a
            ScreenViewport.</remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.LoadSpritePalette(Romulus.ReturnEventArgs{Romulus.Nes.CompositePalette})">
            <summary>
            Override this method to specify a sprite palette.
            </summary>
            <param name="e">Used to return the sprite palette.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.LoadBgPalette(Romulus.ReturnEventArgs{Romulus.Nes.CompositePalette})">
            <summary>
            Override this method to specify a bg palette.
            </summary>
            <param name="e">Used to return the palette.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.ConstructSpriteList(Romulus.EventArgs{Romulus.Nes.NameTableRenderer})">
            <summary>
            Override this method to create a list of sprites.
            </summary>
            <param name="e">The nametable renderer to add sprites to.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.ConstructNametable">
            <summary>
            Override this method to create a nametable.
            </summary>
            <remarks>The nametable defines the tiles and palettes used to draw the background.</remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.ClearSpriteList(System.ComponentModel.CancelEventArgs)">
            <summary>
            Override this method to prevent the sprite list from being cleared.
            </summary>
            <param name="e">Can be modified to prevent the sprite list from being cleared.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.BeforeRender">
            <summary>
            Override this method to do any preparation for rendering.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.AfterRender">
            <summary>
            Override this method to do any cleanup or additional work after rendering.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenControl.CreateView">
            <summary>
            Override this method to return a custom ScreenView
            rather that the stock ScreenView.
            </summary>
            <returns>The ScreenView to be hosted in the ScreenControl.</returns>
        </member>
        <member name="T:Romulus.Nes.PatternTable">
            <summary>
            Provides functions to load ROM graphic data into a System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.BytesPerPattern">
            <summary>
            Defines the number of bytes used by the data of one pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.PatternWidth">
            <summary>
            Defines the width of a single pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.PatternHeight">
            <summary>
            Defines the height of a single pattern.
            </summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.patterns">
            <summary>Stores the actual pattern images.</summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable._Linear">
            <summary>If true, patterns are stored in a horizontal strip of tiles rather than a grid of tiles.</summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.rom">
            <summary>The ROM from which the patterns are loaded.</summary>
        </member>
        <member name="M:Romulus.Nes.PatternTable.#ctor(System.Boolean)">
            <summary>
            Creates a new pattern table.
            </summary>
            <param name="linear">If true, the patterns will be loaded in a horizontal 
            string (good for constructing images from). If false, the patterns will be
            loaded in a 16 x 16 grid (good for displaying to user).</param>
        </member>
        <member name="F:Romulus.Nes.PatternTable.lockData">
            <summary>Stores BitmapData if the buffer is locked. Set to null if the buffer is not locked.</summary>
        </member>
        <member name="F:Romulus.Nes.PatternTable.lockBits">
            <summary>Locked buffer data. If the buffer is not locked, the variable may be null.</summary>
        </member>
        <member name="M:Romulus.Nes.PatternTable.BeginWrite">
            <summary>
            Prepares the pattern table for loading tiles.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTable.EndWrite">
            <summary>
            Finalizes writing operations to the pattern table. This must be called after loading patterns and before the
            pattern table can be used.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTable.LoadTiles(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads a strip of tiles from raw ROM data into this pattern table.
            </summary>
            <param name="data">The ROM image to load tiles from</param>
            <param name="sourceOffset">The location of the graphic data</param>
            <param name="destTileStart">Which tile to begin loading at</param>
            <param name="destTileCount">The number of tiles to load</param>
            <remarks>A group of tiles is loaded starting at the specified tile index. If the tiles
            reach the end of a row in a square pattern table they wrap to the next line. If the end of the pattern table is reached
            or the end of ROM data is reached, copying will stop without error.
            The function BeginWrite must be called at some points before this function
            is called. The function EndWrite must be called to finalize the process. Otherwise
            the loaded tiles will not be reflected in this pattern table.</remarks>
        </member>
        <member name="M:Romulus.Nes.PatternTable.LoadWholeTable(System.Byte[],System.Int32)">
            <summary>
            Loads a complete pattern table from a ROM image.
            </summary>
            <param name="data">Rom image.</param>
            <param name="sourceOffset">Location of the pattern data.</param>
            <remarks>If the pattern table is not already locked, it will be
            locked for the duration of the operation.</remarks>
        </member>
        <member name="M:Romulus.Nes.PatternTable.LoadWholeTable(System.Byte[],Romulus.Nes.pHRom)">
            <summary>
            Loads a complete pattern table from a ROM image.
            </summary>
            <param name="data">Rom image.</param>
            <param name="sourceOffset">Location of the pattern data.</param>
            <remarks>If the pattern table is not already locked, it will be
            locked for the duration of the operation.</remarks>
        </member>
        <member name="M:Romulus.Nes.PatternTable.Clear">
            <summary>
            Clears pattern data from the pattern image. If the pattern table
            is not already locked, it will be locked for the duration of this
            operation.
            </summary>
        </member>
        <member name="M:Romulus.Nes.PatternTable.LoadTilesGrid(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Loads tile data. Tiles will be arranged in a grid.</summary>
            <param name="data">ROM image.</param>
            <param name="offset">Offset of tile data.</param>
            <param name="tileOffset">Index in the pattern table to load the tiles to.</param>
            <param name="tileCount">Number of tiles to load.</param>
        </member>
        <member name="M:Romulus.Nes.PatternTable.LoadTilesString(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Loads tile data. Tiles will be arranged in a horizontal strip.</summary>
            <param name="data">ROM image.</param>
            <param name="offset">Offset of tile data.</param>
            <param name="tileOffset">Index in the pattern table to load the tiles to.</param>
            <param name="tileCount">Number of tiles to load.</param>
        </member>
        <member name="M:Romulus.Nes.PatternTable.ExtractSingleTile(System.Drawing.Bitmap,System.Drawing.Point,System.Byte[],System.Int32)">
            <summary>
            Loads an individual tile from ROM data to a bitmap.
            </summary>
            <param name="b">The bitmap the tile will be rendered on. Must be 8-bpp.</param>
            <param name="tileLocation">The location on the bitmap to draw the tile.</param>
            <param name="data">Rom image.</param>
            <param name="offset">Offset of the tile within the rom image.</param>
        </member>
        <member name="M:Romulus.Nes.PatternTable.Dispose">
            <summary>
            Releases resources used by this object.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternTable.Rom">
            <summary>Gets/sets the ROM this pattern table belongs to. This is not used internally be the PatternTable class.</summary>
        </member>
        <member name="P:Romulus.Nes.PatternTable.WriteInProgress">
            <summary>
            Returns true if this object is locked for writing.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternTable.PatternImage">
            <summary>
            Returns an 8 bpp bitmap containing all loaded tiles.
            </summary>
        </member>
        <member name="P:Romulus.Nes.PatternTable.Palette">
            <summary>
            Gets or sets the color applied to this pattern table. This will have no effect on images
            rendered with the ScreenRenderer class.
            </summary>
            <remarks>Changes to the paletteIndex will be reflected in all references to
            this PatternTable's Patterns. If you need to use multiple palettes simultaneously
            you should, for each differently paletted version, set the desired paletteIndex,
            clone the pattern brush and retain the clone(s) as the paletted brush(s).</remarks>
        </member>
        <member name="T:Romulus.Plugin.DataConversionException">
            <summary>
            Thrown when a data conversion via IDataTypeConverter has failed.
            </summary>
            <remarks>Ideally a conversion should succeed if IDataTypeConverter.CanConvert
            returns true, but it may not be practical for a converter to check for every 
            possible cause of failure. Every attempted conversion should involve exception
            handling.</remarks>
        </member>
        <member name="M:Romulus.Plugin.DataConversionException.#ctor(System.String)">
            <summary>
            Creates a DataConversionException.
            </summary>
            <param name="message">The message that describes this error.</param>
        </member>
        <member name="M:Romulus.Plugin.DataConversionException.#ctor">
            <summary>
            Creates a DataConversionException.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.DataConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a DataConversionException.
            </summary>
            <param name="message">The message that describes this error.</param>
            <param name="inner">The exception that resulted in this exception.</param>
        </member>
        <member name="M:Romulus.Plugin.DataConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes exception.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:iLab.InterpolatedBox">
            <summary>
            A PictureBox control extended to allow different interpolation options.
            </summary>
        </member>
        <member name="F:iLab.InterpolatedBox.interpolation">
            <summary>Backing Field</summary>
        </member>
        <member name="M:iLab.InterpolatedBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden to modify rendering behavior.
            </summary>
            <param name="pe">Painting event args.</param>
        </member>
        <member name="P:iLab.InterpolatedBox.Interpolation">
            <summary>
            The interpolation used to render the image.
            </summary>
        </member>
        <member name="T:iLab.InterpolatedPanel">
            <summary>
            A PictureBox control extended to allow a variety of interpolations.
            </summary>
        </member>
        <member name="F:iLab.InterpolatedPanel.interpolation">
            <summary>Backing Field</summary>
        </member>
        <member name="M:iLab.InterpolatedPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden to modify rendering behavior.
            </summary>
            <param name="pe">Painting event args.</param>
        </member>
        <member name="P:iLab.InterpolatedPanel.Interpolation">
            <summary>
            The interpolation used to render the image.
            </summary>
        </member>
        <member name="T:Romulus.Plugin.IPluginClipboardEvents">
            <summary>
            Defines an optional interface for plugin components
            to handle clipboard events.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IPluginClipboardEvents.OnCut">
            <summary>
            Called when the user invokes a cut operation.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IPluginClipboardEvents.OnCopy">
            <summary>
            Called when the user invokes a copy operation.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IPluginClipboardEvents.OnPaste">
            <summary>
            Called when the user invokes a paste operation.
            </summary>
        </member>
        <member name="M:Romulus.Plugin.IPluginClipboardEvents.OnClipboardChanged">
            <summary>
            Called when the clipboard's contents changed.
            </summary>
        </member>
        <member name="M:Romulus.GeneralExtension.PointToSpecified(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Gets the specified point (relative to this control) in coordinates relative to the specified control.
            </summary>
            <param name="c"></param>
            <param name="point">The point to convert.</param>
            <param name="target">The control to get coordinates for.</param>
            <returns></returns>
        </member>
        <member name="M:Romulus.GeneralExtension.ArgNullCheck(System.Object,System.String)">
            <summary>
            Utility method to check if an argument in null, and throw an exception
            if so.
            </summary>
            <param name="o">The arugment variable.</param>
            <param name="argName">The argument name.</param>
        </member>
        <member name="M:Romulus.GeneralExtension.GetHexVal(System.Char)">
            <summary>
            Returns the value of a hexadecimal digit as an integer.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Romulus.GeneralExtension.Div_Up(System.Int32,System.Int32)">
            <summary>
            Performs integer division with round-up. (For negative numbers,
            the effect will be the same as trucation, i.e. round toward zero.)
            </summary>
            <param name="i"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Romulus.GeneralExtension.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the integer value, clamped between min and max, inclusive.
            </summary>
            <param name="i">The value to be clamped.</param>
            <param name="min">The minimum value returned.</param>
            <param name="max">The maximum value returned.</param>
            <returns>min, if the value is less than min, or max if the value is greater than max. Otherwise,
            the same value is returned.</returns>
        </member>
        <member name="M:Romulus.GeneralExtension.ClampBottom(System.Int32,System.Int32)">
            <summary>
            Returns the integer value, or min if the value is less than min.
            </summary>
            <param name="i">The value to be clamped.</param>
            <param name="min">The minumum value returned.</param>
            <returns>The integer value, or min if the value is less than min.</returns>
        </member>
        <member name="M:Romulus.GeneralExtension.ClampTop(System.Int32,System.Int32)">
            <summary>
            Returns the integer value, or max if the value is greater than max.
            </summary>
            <param name="i">The value to be clamped.</param>
            <param name="min">The maximum value returned.</param>
            <returns>The integer value, or max if the value is greater than max.</returns>
        </member>
        <member name="T:Romulus.Nes.ScreenViewport">
            <summary>
            Windows Forms control that allows a user to scroll around large game areas.
            </summary>
            <remarks>
            The ScreenViewport class should be inherited and customized to create a game-specific
            viewing/editing control. This generally also requires a customized ScreenView class.
            </remarks>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.viewX">
            <summary>Current location of the viewport within the game world.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.viewY">
            <summary>Current location of the viewport within the game world.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.screens">
            <summary>Manages loading and unloading of ScreenViews.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport._focus">
            <summary>Reference to ScreenView that has input focus.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.#ctor">
            <summary>
            Creates a new ScreenViewport.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.GetCellType">
            <summary>
            Called when creating the ScreenViewPort. Override to specify a ScreenViewCellType
            other than the default. The returned value should not change throughout the lifetime
            of the ScreenViewport object.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.GetCellPadding">
            <summary>
            Called when creating the ScreenViewPort. Override to specify a padding
            other than the default. The returned value should not change throughout the lifetime
            of the ScreenViewport object.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.CreateNewScreenView">
            <summary>
            Override this method in a derived class to return a custom or derived
            ScreenView. (This method should not be called explicitly.)
            </summary>
            <returns>Returns a new ScreenView.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ShouldLoadScreen(Romulus.CellIndex)">
            <summary>
            Override this method to identify which screens should be loaded and
            which screens should be empty.
            </summary>
            <param name="cellLocation">The map location to test.</param>
            <returns>True to indicate that the specified map location has content,
            false to indicate it is empty.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ReevaluateEmptyScreens">
            <summary>
            This method re-evaluates which screens should be empty.
            </summary>
            <remarks>
            For example, if a different
            level is loaded into an existing ScreenViewport, and it is not the same shape
            as the previous level, this
            method should be called to re-asses which screens have content.
            </remarks>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.screens_RemovingScreen(System.Object,Romulus.EventArgs{Romulus.Nes.ScreenView})">
            <summary>Raises the ScreenViewport.RemovingScreen event in response to the ScreenViewManager.RemovingScreen event.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.screens_AddedScreen(System.Object,Romulus.EventArgs{Romulus.Nes.ScreenView})">
            <summary>Raises the ScreenViewport.AddedScreen event in response to the ScreenViewManager.AddedScreen event.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnRemovingScreen(Romulus.EventArgs{Romulus.Nes.ScreenView})">
            <summary>
            Override this method to handle the RemovingScreen event.
            </summary>
            <param name="e">Specifies the screenview the event is for.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnAddingScreen(Romulus.EventArgs{Romulus.Nes.ScreenView})">
            <summary>
            Override this method to handle the AddedScreen event.
            </summary>
            <param name="e">Specifies the screenview the event is for.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>Causes the CmdKeyPressed event to be raised in response to
            ProcessCmdKey.</summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnCmdKeyPressed(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the CmdKeyPressed event.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override to handle the Paint event.
            </summary>
            <param name="e">Arguments to the Paint event.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnPaintScans(System.Drawing.RectangleF[],System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override to handle the PaintScans event.
            </summary>
            <param name="scans">The invalid scans.</param>
            <param name="e">Arguments to the PaintScans event.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnWorldViewChanged">
            <summary>
            Override to handle the WorldViewChanged event.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.InvalidateWorld(System.Drawing.Rectangle)">
            <summary>
            Invalidates a rectangle in world coordinates.
            </summary>
            <param name="worldRect">The invalid rectangle.</param>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.isMouseScrolling">
            <summary>True if the user is scrolling with the mouse.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.mouseScrollButton">
            <summary>Stores the button being used to scroll.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.scrollStartX">
            <summary>Screen coodinates where scrolling started.</summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.scrollStartY">
            <summary>Screen coodinates where scrolling started.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Routes MouseDown event and handles scrolling.</summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ConvertScreenToWorld(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Converts screen coods to world coords
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.BeginDrag(System.Int32,System.Int32)">
            <summary>
            Initiates mouse scrolling
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnResize(System.EventArgs)">
            <summary>
            Infrastructure. Handles Resize event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Routes MouseMove event and handles scrolling.</summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ScrollScreen(System.Int32,System.Int32)">
            <summary>
            Scrolls the view by the specified number of screens.
            </summary>
            <param name="screensX">The number of screen widths to scroll the view.</param>
            <param name="screensY">The number of screen heights to scroll the view.</param>
        </member>
        <member name="F:Romulus.Nes.ScreenViewport.identityMatrix">
            <summary>Used in ScrollView code.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ScrollView(System.Int32,System.Int32)">
            <summary>
            Scrolls the view by the specified number of pixels.
            </summary>
            <param name="dx">The distance to scroll the view.</param>
            <param name="dy">The distance to scroll the view.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Routes MouseUp event and handles scrolling.</summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.EndDrag">
            <summary>
            Stops a mouse scroll.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.SetViewportLocation(System.Drawing.Point)">
            <summary>
            Sets the rectangle of the game area that is visible.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.OnRomChanged">
            <summary>Updates control when the ROM is set.</summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.SetFocus(Romulus.Nes.ScreenView)">
            <summary>
            Sets which ScreenView has focus.
            </summary>
            <param name="view">The view to get focus, or null to have no focused view.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ClearFocus">
            <summary>
            Causes no ScreenViews to have focus. Same effect
            as calling <c>SetFocus(null)</c>.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.BeginUpdate">
            <summary>
            Prevents the ScreenViewport from drawing until EndUpdate is called.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.EndUpdate">
            <summary>
            To be called after calling BeginUpdate, when any necessary updates have been made.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.RedrawAll">
            <summary>
            Rerenders and repaints all screens.
            </summary>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.Redraw(System.Predicate{Romulus.Nes.ScreenView})">
            <summary>
            Rerenders and repaints all screens that meet the specified condition.
            </summary>
            <param name="condition">The condition to test screens for.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.Redraw(Romulus.CellIndex)">
            <summary>
            Redraws and repaints a single screen.
            </summary>
            <param name="cellLocation">The location of the screen to redraw.</param>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ConvertWorldToControl(System.Drawing.Rectangle)">
            <summary>
            Converts world coordinates to control coordinates.
            </summary>
            <param name="rect">World coordinates to convert.</param>
            <returns>Coordinates converted to control coodrinates.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ConvertControlToWorld(System.Drawing.Rectangle)">
            <summary>
            Converts control coordinates to world coordinates.
            </summary>
            <param name="rect">Control coordinates to convert.</param>
            <returns>Coordinates converted to world coordinates.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ConvertWorldToControl(System.Drawing.Point)">
            <summary>
            Converts world coordinates to control coordinates.
            </summary>
            <param name="p">World coordinates to convert.</param>
            <returns>Coordinates converted to control coodrinates.</returns>
        </member>
        <member name="M:Romulus.Nes.ScreenViewport.ConvertControlToWorld(System.Drawing.Point)">
            <summary>
            Converts control coordinates to world coordinates.
            </summary>
            <param name="p">Control coordinates to convert.</param>
            <returns>Coordinates converted to world coordinates.</returns>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.CellType">
            <summary>Gets the cell type used in this ScreenViewport.</summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.CellSize">
            <summary>Gets the size of the cells in this ScreenViewport.</summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.CellPadding">
            <summary>Gets the amount of space that will appear around each screen image.</summary>
        </member>
        <member name="E:Romulus.Nes.ScreenViewport.AddedScreen">
            <summary>Raised after a screen is added to the ScreenViewport.</summary>
            <remarks>Screens are added to the control when they are scrolled into view.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenViewport.RemovingScreen">
            <summary>Raised before a screen is removed from the ScreenViewport.</summary>
            <remarks>Screens are removed from the control when they are scrolled out of view.</remarks>
        </member>
        <member name="E:Romulus.Nes.ScreenViewport.CmdKeyPressed">
            <summary>
            Raised when a command key is pressed.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.Screens">
            <summary>
            Gets the ScreenViewManager used by this control.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.AllowUserScroll">
            <summary>
            If true, the user can drag with the middle mouse button (or the left button while holding the specified scroll key)
            to scroll the view around.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.ScrollKeys">
            <summary>
            Specifies which keys the user should hold whil dragging the mouse to scroll with the left mouse button.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.ScrollSpeed">
            <summary>
            Gets/sets the speed at which the control will be scrolled by the mouse.
            A value of 1 indicates the view will scroll at the same speed the mouse is moved.
            </summary>
        </member>
        <member name="E:Romulus.Nes.ScreenViewport.WorldViewChanged">
            <summary>
            Raised when the location of the viewport changes.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.WorldViewport">
            <summary>
            Gets the rectangle of the game area that is visible.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.Rom">
            <summary>
            Gets/sets the ROM associated with this control.
            </summary>
        </member>
        <member name="P:Romulus.Nes.ScreenViewport.FocusedScreenView">
            <summary>
            Gets the ScreenView that has input focus.
            </summary>
        </member>
        <member name="T:Romulus.Nes.ScreenViewCellType">
            <summary>
            Represents the possible cell sizes in a ScreenViewManager.
            </summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewCellType.Clipped">
            <summary>
            The screen viewports will only show a 256, 240 portion of the rendered screen. The last
            16 pixels will be cropped.
            </summary>
        </member>
        <member name="F:Romulus.Nes.ScreenViewCellType.Full">
            <summary>
            The screen viewports will show a full 256, 256 image.
            </summary>
        </member>
        <member name="T:Romulus.PatternTableControl">
            <summary>
            UI component to present a pattern table, and optionally allow the user to select a pattern.
            </summary>
        </member>
        <member name="M:Romulus.PatternTableControl.#ctor">
            <summary>
            Creates a new PatternTableControl.
            </summary>
        </member>
        <member name="M:Romulus.PatternTableControl.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Implementation detail.
            </summary>
            <param name="proposedSize"></param>
            <returns></returns>
        </member>
        <member name="M:Romulus.PatternTableControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Implementation detail.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Romulus.PatternTableControl.updateLevel">
            <summary>
            If non-zero, the control is being updated and should suspend redrawing.
            </summary>
        </member>
        <member name="F:Romulus.PatternTableControl.redrawPending">
            <summary>Set to true when the control needs to redraw patterns but the update level is greater than zero.
            Update should be performed when EndUpdate sets the update level to zero.</summary>
        </member>
        <member name="M:Romulus.PatternTableControl.BeginUpdate">
            <summary>
            Call before updating to prevent extra redraws.
            </summary>
        </member>
        <member name="M:Romulus.PatternTableControl.EndUpdate">
            <summary>
            Call after BeginUpdate, when done updating.
            </summary>
        </member>
        <member name="M:Romulus.PatternTableControl.Dispose(System.Boolean)">
            <summary>
            Frees resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Romulus.PatternTableControl.PatternSelected">
            <summary>
            Occurs when the user selects a pattern via the UI.
            </summary>
        </member>
        <member name="E:Romulus.PatternTableControl.SelectionChanged">
            <summary>Occurs when the SelectedPatternIndex property's value changes.</summary>
        </member>
        <member name="P:Romulus.PatternTableControl.Palette">
            <summary>
            Gets/sets the palette to use.
            </summary>
        </member>
        <member name="P:Romulus.PatternTableControl.RenderedPatterns">
            <summary>
            Returns a 32-bpp image of the rendered patterns with the specified palette.
            </summary>
        </member>
        <member name="P:Romulus.PatternTableControl.Patterns">
            <summary>
            Gets/sets the pattern table.
            </summary>
        </member>
        <member name="P:Romulus.PatternTableControl.SelectedPatternIndex">
            <summary>
            Gets/sets the index of the selected pattern.
            </summary>
        </member>
        <member name="T:Romulus.Nes.SinglePalette">
            <summary>
            Represents a 4-color palette. Can be ROM-backed (wraps and modifies ROM data) or independent.
            </summary>
        </member>
        <member name="F:Romulus.Nes.SinglePalette.Size">
            <summary>The number of colors in a single palette.</summary>
        </member>
        <member name="F:Romulus.Nes.SinglePalette.data">
            <summary>The buffer the palette data is stored in. This can be either a ROM image or a local buffer.</summary>
        </member>
        <member name="F:Romulus.Nes.SinglePalette.offset">
            <summary>The location within the buffer of the palette data.</summary>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a ROM-backed palette object.
            </summary>
            <param name="data">ROM image.</param>
            <param name="offset">Location of palette data.</param>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.CreateNewPalette">
            <summary>
            Returns a new independent SinglePalette (NOT ROM-backed).
            </summary>
            <returns>A new SinglePalette object that does not directly reference ROM data.</returns>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.CreateCopy">
            <summary>
            Creates a copy of this palette. The copy will have its own buffer
            (changes made to the copy won't be reflected in the original palette
            /ROM image).
            </summary>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.Overwrite(Romulus.Nes.SinglePalette)">
            <summary>
            Copies the specified palette into this palette.
            </summary>
            <param name="pal">The palette to copy</param>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.ApplyToBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Applies this palette to an 8-bit paletted bitmap.
            </summary>
            <param name="b">The bitmap to apply the palette to.</param>
            <param name="index">The palette index of the target bitmap that
            specifies where in the color table this palette will be written to.</param>
        </member>
        <member name="M:Romulus.Nes.SinglePalette.ApplyToBitmap(System.Drawing.Bitmap,System.Int32,Romulus.Graphic.ColorFilter)">
            <summary>
            Applies this palette to an 8-bit paletted bitmap.
            </summary>
            <param name="b">The bitmap to apply the palette to.</param>
            <param name="index">The palette index of the target bitmap that
            specifies where in the color table this palette will be written to.</param>
            <param name="filter">A function that modifies the colors
            that will be applied to the bitmap.</param>
        </member>
        <member name="P:Romulus.Nes.SinglePalette.IsEmpty">
            <summary>
            Returns true if this object is uninitialized.
            </summary>
        </member>
        <member name="P:Romulus.Nes.SinglePalette.Item(System.Int32)">
            <summary>
            Gets/sets an entry in the palette.
            </summary>
            <param name="index">A value from 0 and three specifying a palette entry.</param>
            <returns>A color index from this palette.</returns>
        </member>
        <member name="P:Romulus.Nes.SinglePalette.UsesLocalBuffer">
            <summary>
            Returns true if this palette is backed by its own private buffer.
            A return value of false indigates that this palette references
            the buffer of a ROM image or a CompositePalette.
            </summary>
        </member>
        <member name="T:Romulus.Nes.CompositePalette">
            <summary>
            Represents a 16-color composite of four 4-color palettes. This acts as
            a complete background or sprite palette.
            </summary>
        </member>
        <member name="F:Romulus.Nes.CompositePalette.Size">
            <summary>The number of colors in a composite palette.</summary>
        </member>
        <member name="F:Romulus.Nes.CompositePalette.SinglePaletteCount">
            <summary>The number of single palettes in a composite palette.</summary>
        </member>
        <member name="F:Romulus.Nes.CompositePalette.data">
            <summary>The buffer the palette data is stored in. This can be either a ROM image or a local buffer.</summary>
        </member>
        <member name="F:Romulus.Nes.CompositePalette.offset">
            <summary>The location within the buffer of the palette data.</summary>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a palette object backed a ROM image or another
            existing buffer.
            </summary>
            <param name="data">Rom image or buffer.</param>
            <param name="offset">Offset within the buffer.</param>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.#ctor(System.Byte[],Romulus.Nes.pHRom)">
            <summary>
            Creates a ROM-backed palette object.
            </summary>
            <param name="data">Rom image or buffer.</param>
            <param name="offset">Offset within the buffer.</param>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.CreateNewPalette">
            <summary>
            Returns a new palette with its own buffer.
            </summary>
            <returns>A new palette with its own buffer.</returns>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.SetPalette(Romulus.Nes.SinglePalette,System.Int32)">
            <summary>
            Copies the specified single palette into this composite palette.
            </summary>
            <param name="pal">The palette to copy data from.</param>
            <param name="index">An index, from 0 to 3, that specifies which palette should be overwritten.</param>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.GetPaletteData(System.Int32)">
            <summary>
            Gets a copy of a section of this palette as a SinglePalette. Changes
            made to the copy will not be reflected in the original palette or ROM image.
            </summary>
            <param name="index">The index of the palette to get.</param>
            <returns>A SinglePalette with its own buffer.</returns>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.GetPalette(System.Int32)">
            <summary>
            Gets a SinglePalette that references this composite palette. Modifications
            to the returned object will be reflected in this CompositePalette.
            </summary>
            <param name="index">The index of the palette to get.</param>
            <returns>A SinglePalette that references this palette.</returns>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.CreateCopy">
            <summary>
            Creates an indepentant copy of this palette with its own buffer.
            </summary>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.Overwrite(Romulus.Nes.CompositePalette)">
            <summary>
            Copies the specified palette into this palette.
            </summary>
            <param name="data">The palette data to copy.</param>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.ApplyToBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Applies this palette to an 8-bit paletted bitmap.
            </summary>
            <param name="b">The bitmap to apply the palette to.</param>
            <param name="index">The palette index of the target bitmap that
            specifies where in the color table this palette will be written to.</param>
        </member>
        <member name="M:Romulus.Nes.CompositePalette.ApplyToBitmap(System.Drawing.Bitmap,System.Int32,Romulus.Graphic.ColorFilter)">
            <summary>
            Applies this palette to an 8-bit paletted bitmap.
            </summary>
            <param name="b">The bitmap to apply the palette to.</param>
            <param name="index">The palette index of the target bitmap that
            specifies where in the color table this palette will be written to.</param>
            <param name="filter">A function that modifies the colors applied to the bitmap.</param>
        </member>
        <member name="P:Romulus.Nes.CompositePalette.IsEmpty">
            <summary>
            Returns true if this object is not initialized.
            </summary>
        </member>
        <member name="P:Romulus.Nes.CompositePalette.Item(System.Int32)">
            <summary>
            Gets/sets an individual color entry from one of the four palettes.
            </summary>
            <param name="index">An index from 0 to 15 identifying one of the entries in the palette.</param>
            <returns>The color index specified by one of the palette's entries.</returns>
        </member>
        <member name="P:Romulus.Nes.CompositePalette.UsesLocalBuffer">
            <summary>
            Returns true if this palette is backed by its own private buffer.
            A return value of false indigates that this palette references
            the buffer of a ROM image or a CompositePalette.
            </summary>
        </member>
        <member name="T:Romulus.Nes.NameTableRenderer">
            <summary>
            Renders a name table to a bitmap. This class can be inherited to customize the renderer
            for a custom ScreenView.
            </summary>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.#ctor(Romulus.Nes.SmallNameTable,System.Drawing.Bitmap,Romulus.Nes.Blitter)">
            <summary>
            Creates a new NameTableRenderer.
            </summary>
            <param name="nametable">The nametable to render. If null, the renderer will create a new nametable.</param>
            <param name="target">The bitmap to render to (must be 256, 256). If null, the renderer will create a new bitmap for the render target.</param>
            <param name="blitter">The blitter to use for rendering. If null, the renderer will use its own blitter.</param>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.#ctor">
            <summary>
            Creates a new NameTableRenderer.
            </summary>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.RenderGdip(System.Drawing.Graphics)">
            <summary>
            Renders a screen using GDI+. Because of GDI+ limitations this method performs poorly and
            may produce different output than normal rendering methods.
            </summary>
            <param name="g">Graphics object with which to render.</param>
            <remarks>This function has bad performance and may produce incomplete or
            incorrect results.</remarks>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.Render">
            <summary>
            Renders the screen.
            </summary>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.Render(System.Action{Romulus.Nes.Blitter})">
            <summary>
            Renders the screen, and allows execution of a custom post-rendering function.
            </summary>
            <param name="customRendering">An action to perform after rendering the nametable.</param>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.OnAfterRender">
            <summary>
            Override this method for post-processing in a derived class.
            </summary>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.RenderSprites(Romulus.Nes.Blitter)">
            <summary>Renders sprites.</summary>
            <param name="b">The blitter object</param>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.RenderBg(Romulus.Nes.Blitter)">
            <summary>
            Override to add additional logic.
            </summary>
            <param name="b">Blitter used to render BG.</param>
        </member>
        <member name="M:Romulus.Nes.NameTableRenderer.AddSprite(Romulus.Nes.SpriteDef,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a composite sprite to the renderers sprite list.
            </summary>
            <param name="sprite">The sprite to add.</param>
            <param name="x">The X location to draw the sprite to.</param>
            <param name="y">The Y location to draw the sprite to.</param>
            <param name="basePal">The base palette, added to each individual tile's palette number.</param>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.NameTable">
            <summary>Gets the NameTable associated with this renderer.</summary>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.Blitter">
            <summary>Gets the Blitter associated with this renderer.</summary>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.BgPatterns">
            <summary>Gets/sets the background patterns the renderer will use.</summary>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.SpritePatterns">
            <summary>Gets/sets the sprite patterns the renderer will use.</summary>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.OutputBitmap">
            <summary>Gets the Bitmap that will be rendered to.</summary>
        </member>
        <member name="P:Romulus.Nes.NameTableRenderer.Sprites">
            <summary>Gets a list that specifies sprites to be drawn.</summary>
        </member>
        <member name="T:Romulus.MD5Hash">
            <summary>
            Represents an MD5 hash value.
            </summary>
        </member>
        <member name="M:Romulus.MD5Hash.#ctor(System.Byte[])">
            <summary>
            Creates an MD5 hash of the specified data.
            </summary>
            <param name="dataToHash">Binary data to hash.</param>
        </member>
        <member name="M:Romulus.MD5Hash.#ctor(System.String,Romulus.MD5Hash.Encoding)">
            <summary>
            Creates an MD5 hash of a string.
            </summary>
            <param name="dataToHash">The string to hash.</param>
            <param name="encoding">The encoding of the string.</param>
        </member>
        <member name="M:Romulus.MD5Hash.#ctor(System.String)">
            <summary>
            Creates an MD5 hash of a string.
            </summary>
            <param name="dataToHash">The string to hash.</param>
            <remarks>This overload uses the default encoding.</remarks>
        </member>
        <member name="M:Romulus.MD5Hash.Init(System.Byte[])">
            <summary>
            Populates this object with MD5 data.
            </summary>
        </member>
        <member name="M:Romulus.MD5Hash.Equals(System.Object)">
            <summary>
            Compares this MD5 to a random object.
            </summary>
            <param name="obj">An object to compare to.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.Equals(Romulus.MD5Hash)">
            <summary>
            Compares this MD5 hash to another MD5 hash.
            </summary>
            <param name="hash">The hash to compare to.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.op_Equality(Romulus.MD5Hash,Romulus.MD5Hash)">
            <summary>
            Defines the == operator between two MD5Hash objects.
            </summary>
            <param name="a">An MD5 to compare.</param>
            <param name="b">An MD5 to compare.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.op_Inequality(Romulus.MD5Hash,Romulus.MD5Hash)">
            <summary>
            Defines the != operator between two MD5Hash objects.
            </summary>
            <param name="a">An MD5 to compare.</param>
            <param name="b">An MD5 to compare.</param>
            <returns>A boolean indicating inequality.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.ToByteArray">
            <summary>
            Gets the MD5 hash as a byte array.
            </summary>
            <returns>A byte array containing the hash data.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.FromByteArray(System.Byte[])">
            <summary>
            Creates an MD5 hash from a byte array.
            </summary>
            <param name="hashBytes">The MD5 data.</param>
            <returns>An MD5 hash object.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.ToString">
            <summary>
            Converts the MD5 hash to a string.
            </summary>
            <returns>A string representation of the hash.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.FromString(System.String)">
            <summary>
            Returns an MD5 hash object from a properly formatted hexadecimal string
            </summary>
            <returns>An MD5Hash.</returns>
        </member>
        <member name="M:Romulus.MD5Hash.getDigitValue(System.Char)">
            <summary>For use by GetWord. Returns the value of a single hex digit.</summary>
        </member>
        <member name="F:Romulus.MD5Hash.digits">
            <summary>For use by AppendDigits</summary>
        </member>
        <member name="M:Romulus.MD5Hash.AppendDigits(System.Text.StringBuilder,System.Int32)">
            <summary>For use by ToString, appends 32 bits of binary data as hex string to a string builder.</summary>
        </member>
        <member name="T:Romulus.MD5Hash.Encoding">
            <summary>
            Lists various text encodings.
            </summary>
        </member>
        <member name="F:Romulus.MD5Hash.Encoding.ASCII">
            <summary>
            ASCII encoding.
            </summary>
        </member>
        <member name="F:Romulus.MD5Hash.Encoding.UTF8">
            <summary>
            UTF-8 encoding.
            </summary>
        </member>
        <member name="F:Romulus.MD5Hash.Encoding.UTF16">
            <summary>
            UTF-16 encoding.
            </summary>
        </member>
        <member name="F:Romulus.MD5Hash.Encoding.Default">
            <summary>
            System default encoding.
            </summary>
        </member>
        <member name="T:Romulus.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Romulus.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Romulus.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Romulus.NotReadyException">
            <summary>
            Thrown when an attempt is made to perform an operation on an object that is not properly or fully
            initialized or prepared for the operation.
            </summary>
        </member>
        <member name="M:Romulus.NotReadyException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Romulus.Nes.NesHeader">
            <summary>
            Decodes and modifies an iNES header. Nes 2.0 header
            data is not supported, and some unofficial header data
            is supported.
            </summary>
        </member>
        <member name="F:Romulus.Nes.NesHeader.PrgPageSize">
            <summary>The size of the pages the PRG ROM count refers to.</summary>
        </member>
        <member name="F:Romulus.Nes.NesHeader.PrgRamPageSize">
            <summary>The size of the pages the PRG RAM count refes to.</summary>
        </member>
        <member name="F:Romulus.Nes.NesHeader.ChrPageSize">
            <summary>The size of the pages the CHR ROM count refers to.</summary>
        </member>
        <member name="F:Romulus.Nes.NesHeader.StandardMagicNumber">
            <summary>The four bytes expected at the beginning of an iNES header.</summary>
        </member>
        <member name="M:Romulus.Nes.NesHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an NesHeader object for the specified data.
            </summary>
            <param name="data">The byte array containing the header data.</param>
            <param name="headerOffset">The location of the header within the data.</param>
        </member>
        <member name="M:Romulus.Nes.NesHeader.#ctor(Romulus.Nes.Rom)">
            <summary>
            Creates an NesHeader object for a ROM.
            </summary>
            <param name="rom">The ROM image.</param>
        </member>
        <member name="P:Romulus.Nes.NesHeader.MagicNumber">
            <summary>
            Gets/sets the first four bytes of the header, which identify the header.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.MagicNumberIsCorrect">
            <summary>
            Returns true if the first four bytes identify the data as an iNES header.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PrgRomCount">
            <summary>
            Gets the number of 16k PRG ROM pages in the ROM image.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PrgRamCount">
            <summary>
            Gets the number of 8k PRG RAM pages for the ROM.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.ChrRomCount">
            <summary>
            Gets the number of 8k CHR ROM pages in the ROM image.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PrgRomSize">
            <summary>
            Gets the total size of the PRG ROM specified by the header.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.ChrRomSize">
            <summary>
            Gets the total size of the CHR ROM specified by the header.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.Mapper">
            <summary>
            Gets the mapper specified by the header.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.Mirroring">
            <summary>
            Gets/sets the name table mirroring specified by the header. Some mappers
            may be able to alter mirroring.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.BatteryPacked">
            <summary>
            Gets/sets whether the header specifies a bettery backup.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.HasTrainer">
            <summary>
            Gets/sets whether the header specifies a trainer. This is generally
            used in pirate games.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.VsUnisystem">
            <summary>
            Gets/sets whether the header spceifies the ROM as a VsUnisystem ROM.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PlayChoice10">
            <summary>
            Gets/sets whether the header spceifies the ROM as a PlayChoice-10 ROM.
            </summary>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PalFlagSet">
            <summary>
            Returns true if any flags are set that indicates this ROM uses or supports PAL displays.
            </summary>
            <remarks>PAL ROMs generally do not have PAL flags properly set, so
            this value can't be relied upon to identify PAL games accurately.</remarks>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PalFlagA">
            <summary>
            Gets/sets whether PAL flag A is set in the header.
            </summary>
            <remarks>Although this flag is part of the official specification,
            PAL ROMs generally do not have PAL flags properly set, so
            this value can't be relied upon to identify PAL games accurately.</remarks>
        </member>
        <member name="P:Romulus.Nes.NesHeader.PalFlagB">
            <summary>
            Gets/sets the status of PAL B flags.
            </summary>
            <remarks>These flags ar not part of the official specification.
            PAL ROMs generally do not have PAL flags properly set, so
            this value can't be relied upon to identify PAL games accurately.</remarks>
        </member>
        <member name="P:Romulus.Nes.NesHeader.SRamFlag">
            <summary>
            Gets/sets whether the header specifies 8k of SRAM banked at 0x6000.
            </summary>
            <remarks>This flag is not part of the official specification is
            is not generally accurately set.</remarks>
        </member>
        <member name="P:Romulus.Nes.NesHeader.HasBusConflicts">
            <summary>
            Gets/sets whether the header identifies a ROM with bis conflicts.
            </summary>
            <remarks>This flag is not part of the official specification, and is
            not generally used. Bus conflicts are a hardware issue and not generally
            relevant to emulation.</remarks>
        </member>
        <member name="P:Romulus.Nes.NesHeader.HasExtentedHeaderTag">
            <summary>
            Gets/sets whether the header specifies a ROM uses the NES 2.0 format.
            </summary>
        </member>
        <member name="T:Romulus.Nes.MapperType">
            <summary>
            Lists known NES mapper codes.
            </summary>
            <remarks><para>Mapper codes don't necessarily map to a specific mapper
            chip or specific board. The codes usually refer to a configuration
            or group of similar configurations.</para>
            <para>The names listed in this enumeration may be the name of a mapper
            chip, the name of a board, the name of the maker of a mapper chip or board,
            or the usage of the code.</para></remarks>
        </member>
        <member name="F:Romulus.Nes.MapperType.NoMapper">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc1">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.UxRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.CxRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc3or6">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc5">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.F4xxx">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.AxRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.F3xxx">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc2">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc4">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.ColorDreams">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.F6xxx">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.CPRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Contra_100_in_1">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Bandai">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.FfeF8xxx">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Jaleco">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Namcot">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Fds">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC4">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC2a">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC2b">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC6">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC4_maybe">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.IremG101">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Taito">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.BxRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Tengen">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.IremH3001">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.GNRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Sunsoft3">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Sunsoft4">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Camerica">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VCR3">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Mmc3Clone">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC1">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Irem74HC161">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Nina003">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.X005">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.C075">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.X1_17">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Cony">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.PasoFami">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.VRC7">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.HK_SF3">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Capcom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Nina003_Also">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.TxSRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.TQRom">
            <summary>An NES mapper.</summary>
        </member>
        <member name="F:Romulus.Nes.MapperType.Nichibutsu">
            <summary>An NES mapper.</summary>
        </member>
        <member name="T:Romulus.Nes.Mirroring">
            <summary>
            Lists PPU mirroring that can be specified by an iNES header.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mirroring.Horizontal">
            <summary>
            Horizontal mirroring.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mirroring.Vertical">
            <summary>
            Vertical mirroring.
            </summary>
        </member>
        <member name="F:Romulus.Nes.Mirroring.FourScreen">
            <summary>
            Four screen mirroring.
            </summary>
        </member>
        <member name="T:Romulus.Nes.PalMode">
            <summary>
            Gets the different video modes a ROM may support.
            </summary>
            <remarks>This is generally ignored by emulators.</remarks>
        </member>
        <member name="F:Romulus.Nes.PalMode.NTSC">
            <summary>Indicates a game is designed for NTSC displays.</summary>
        </member>
        <member name="F:Romulus.Nes.PalMode.Dual">
            <summary>Indicates a game supports both NTSC and PAL displays.</summary>
        </member>
        <member name="F:Romulus.Nes.PalMode.PAL">
            <summary>Indicates a game spports PAL displays.</summary>
        </member>
        <member name="F:Romulus.Nes.PalMode.Dual_B">
            <summary>Indicates a game supports both NTSC and PAL displays.</summary>
        </member>
        <member name="T:System.WeakReference`1">
            <summary> 
            Represents a weak reference, which references an object while still allowing   
            that object to be reclaimed by garbage collection.    
            </summary>    
            <typeparam name="T">The type of the object that is referenced.</typeparam>    
        </member>
        <member name="M:System.WeakReference`1.#ctor(`0)">
            <summary>        
            Initializes a new instance of the Minimal.WeakReference{T} class, referencing        
            the specified object.        
            </summary>        
            <param name="target">The object to reference.</param>        
        </member>
        <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>        
            Initializes a new instance of the WeakReference{T} class, referencing 
            the specified object and using the specified resurrection tracking. 
            </summary>        
            <param name="target">An object to track.</param> 
            <param name="trackResurrection">Indicates when to stop tracking the object. If true, the object is tracked 
            after finalization; if false, the object is only tracked until finalization.</param> 
        </member>
        <member name="M:System.WeakReference`1.op_Implicit(`0)~System.WeakReference{`0}">
            <summary> 
            Casts an object of the type T to a weak reference 
            of T. 
            </summary> 
        </member>
        <member name="P:System.WeakReference`1.Target">
            <summary> 
            Gets or sets the object (the target) referenced by the current WeakReference{T} 
            object. 
            </summary> 
        </member>
        <member name="T:Romulus.ReturnEventArgs`1">
            <summary>
            EventArgs class that allows event handlers to specify a return value.
            </summary>
        </member>
        <member name="M:Romulus.ReturnEventArgs`1.#ctor(`0)">
            <summary>
            Creates a ReturnEventArgs.
            </summary>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:Romulus.ReturnEventArgs`1.#ctor">
            <summary>
            Creates an empty ReturnEventArgs.
            </summary>
        </member>
        <member name="P:Romulus.ReturnEventArgs`1.ReturnValue">
            <summary>
            Gets/sets the return value.
            </summary>
        </member>
        <member name="T:Romulus.CellIndex">
            <summary>
            Defines a location within a grid.
            </summary>
        </member>
        <member name="F:Romulus.CellIndex.value">
            <summary>
            Underlying value.
            </summary>
        </member>
        <member name="M:Romulus.CellIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new CellIndex.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:Romulus.CellIndex.FromPoint(System.Drawing.Point)">
            <summary>
            Converts a point to a CellIndex.
            </summary>
            <param name="value">The point to convert.</param>
            <returns>A new CellIndex object.</returns>
        </member>
        <member name="M:Romulus.CellIndex.AsPoint">
            <summary>
            Convert a CellIndex to a Point.
            </summary>
            <returns>A new Point object.</returns>
        </member>
        <member name="M:Romulus.CellIndex.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.CellIndex.Equals(Romulus.CellIndex)">
            <summary>
            Compares this CellIndex to another CellIndex.
            </summary>
            <param name="p">The CellIndex to compare to.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.CellIndex.op_Equality(Romulus.CellIndex,Romulus.CellIndex)">
            <summary>
            Defines the == operator between two CellIndex objects.
            </summary>
            <param name="a">The first CellIndex to compare.</param>
            <param name="b">The second CellIndex to compare.</param>
            <returns>A boolean indicating equality.</returns>
        </member>
        <member name="M:Romulus.CellIndex.op_Inequality(Romulus.CellIndex,Romulus.CellIndex)">
            <summary>
            Defines the != operator between two CellIndex objects.
            </summary>
            <param name="a">The first CellIndex to compare.</param>
            <param name="b">The second CellIndex to compare.</param>
            <returns>A boolean indicating inequality.</returns>
        </member>
        <member name="M:Romulus.CellIndex.GetHashCode">
            <summary>
            Gets a hashcode for this object.
            </summary>
            <returns>A number.</returns>
        </member>
        <member name="M:Romulus.CellIndex.op_Explicit(Romulus.CellIndex)~System.Drawing.Point">
            <summary>
            Defines an explicit conversion from CellLocation to Point.
            </summary>
            <param name="c">The value to covert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Romulus.CellIndex.op_Explicit(System.Drawing.Point)~Romulus.CellIndex">
            <summary>
            Defines an explicit conversion from Point to CellLocation.
            </summary>
            <param name="p">The value to covert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:Romulus.CellIndex.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:Romulus.CellIndex.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
    </members>
</doc>
